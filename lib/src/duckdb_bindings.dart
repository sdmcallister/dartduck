// AUTO GENERATED FILE, DO NOT EDIT.
//
// Generated by `package:ffigen`.
import 'dart:ffi' as ffi;

/// Bindings to `headers/duckdb.h`.
class DuckDB {
  /// Holds the symbol lookup function.
  final ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
      _lookup;

  /// The symbols are looked up in [dynamicLibrary].
  DuckDB(ffi.DynamicLibrary dynamicLibrary) : _lookup = dynamicLibrary.lookup;

  /// The symbols are looked up with [lookup].
  DuckDB.fromLookup(
      ffi.Pointer<T> Function<T extends ffi.NativeType>(String symbolName)
          lookup)
      : _lookup = lookup;

  void __va_start(
    ffi.Pointer<va_list> arg0,
  ) {
    return ___va_start(
      arg0,
    );
  }

  late final ___va_startPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<va_list>)>>(
          '__va_start');
  late final ___va_start =
      ___va_startPtr.asFunction<void Function(ffi.Pointer<va_list>)>();

  void __security_init_cookie() {
    return ___security_init_cookie();
  }

  late final ___security_init_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '__security_init_cookie');
  late final ___security_init_cookie =
      ___security_init_cookiePtr.asFunction<void Function()>();

  void __security_check_cookie(
    int _StackCookie,
  ) {
    return ___security_check_cookie(
      _StackCookie,
    );
  }

  late final ___security_check_cookiePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__security_check_cookie');
  late final ___security_check_cookie =
      ___security_check_cookiePtr.asFunction<void Function(int)>();

  void __report_gsfailure(
    int _StackCookie,
  ) {
    return ___report_gsfailure(
      _StackCookie,
    );
  }

  late final ___report_gsfailurePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(uintptr_t)>>(
          '__report_gsfailure');
  late final ___report_gsfailure =
      ___report_gsfailurePtr.asFunction<void Function(int)>();

  late final ffi.Pointer<uintptr_t> ___security_cookie =
      _lookup<uintptr_t>('__security_cookie');

  int get __security_cookie => ___security_cookie.value;

  set __security_cookie(int value) => ___security_cookie.value = value;

  void _invalid_parameter_noinfo() {
    return __invalid_parameter_noinfo();
  }

  late final __invalid_parameter_noinfoPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo');
  late final __invalid_parameter_noinfo =
      __invalid_parameter_noinfoPtr.asFunction<void Function()>();

  void _invalid_parameter_noinfo_noreturn() {
    return __invalid_parameter_noinfo_noreturn();
  }

  late final __invalid_parameter_noinfo_noreturnPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>(
          '_invalid_parameter_noinfo_noreturn');
  late final __invalid_parameter_noinfo_noreturn =
      __invalid_parameter_noinfo_noreturnPtr.asFunction<void Function()>();

  void _invoke_watson(
    ffi.Pointer<ffi.WChar> _Expression,
    ffi.Pointer<ffi.WChar> _FunctionName,
    ffi.Pointer<ffi.WChar> _FileName,
    int _LineNo,
    int _Reserved,
  ) {
    return __invoke_watson(
      _Expression,
      _FunctionName,
      _FileName,
      _LineNo,
      _Reserved,
    );
  }

  late final __invoke_watsonPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.UnsignedInt,
              uintptr_t)>>('_invoke_watson');
  late final __invoke_watson = __invoke_watsonPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.Void> _calloc_base(
    int _Count,
    int _Size,
  ) {
    return __calloc_base(
      _Count,
      _Size,
    );
  }

  late final __calloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('_calloc_base');
  late final __calloc_base =
      __calloc_basePtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> calloc(
    int _Count,
    int _Size,
  ) {
    return _calloc(
      _Count,
      _Size,
    );
  }

  late final _callocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Size, ffi.Size)>>('calloc');
  late final _calloc =
      _callocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  int _callnewh(
    int _Size,
  ) {
    return __callnewh(
      _Size,
    );
  }

  late final __callnewhPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Size)>>('_callnewh');
  late final __callnewh = __callnewhPtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.Void> _expand(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __expand(
      _Block,
      _Size,
    );
  }

  late final __expandPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('_expand');
  late final __expand = __expandPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  void _free_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __free_base(
      _Block,
    );
  }

  late final __free_basePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_free_base');
  late final __free_base =
      __free_basePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  void free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return _free(
      _Block,
    );
  }

  late final _freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'free');
  late final _free =
      _freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _malloc_base(
    int _Size,
  ) {
    return __malloc_base(
      _Size,
    );
  }

  late final __malloc_basePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          '_malloc_base');
  late final __malloc_base =
      __malloc_basePtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  ffi.Pointer<ffi.Void> malloc(
    int _Size,
  ) {
    return _malloc(
      _Size,
    );
  }

  late final _mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'malloc');
  late final _malloc =
      _mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  int _msize_base(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize_base(
      _Block,
    );
  }

  late final __msize_basePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          '_msize_base');
  late final __msize_base =
      __msize_basePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  int _msize(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __msize(
      _Block,
    );
  }

  late final __msizePtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Void>)>>(
          '_msize');
  late final __msize =
      __msizePtr.asFunction<int Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _realloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return __realloc_base(
      _Block,
      _Size,
    );
  }

  late final __realloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('_realloc_base');
  late final __realloc_base = __realloc_basePtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
  ) {
    return _realloc(
      _Block,
      _Size,
    );
  }

  late final _reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size)>>('realloc');
  late final _realloc = _reallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int)>();

  ffi.Pointer<ffi.Void> _recalloc_base(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc_base(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recalloc_basePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_recalloc_base');
  late final __recalloc_base = __recalloc_basePtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
  ) {
    return __recalloc(
      _Block,
      _Count,
      _Size,
    );
  }

  late final __recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_recalloc');
  late final __recalloc = __recallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  void _aligned_free(
    ffi.Pointer<ffi.Void> _Block,
  ) {
    return __aligned_free(
      _Block,
    );
  }

  late final __aligned_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          '_aligned_free');
  late final __aligned_free =
      __aligned_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _aligned_malloc(
    int _Size,
    int _Alignment,
  ) {
    return __aligned_malloc(
      _Size,
      _Alignment,
    );
  }

  late final __aligned_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size)>>('_aligned_malloc');
  late final __aligned_malloc = __aligned_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_malloc(
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_malloc(
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_mallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Size, ffi.Size, ffi.Size)>>('_aligned_offset_malloc');
  late final __aligned_offset_malloc = __aligned_offset_mallocPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(int, int, int)>();

  int _aligned_msize(
    ffi.Pointer<ffi.Void> _Block,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_msize(
      _Block,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_msizePtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_aligned_msize');
  late final __aligned_msize = __aligned_msizePtr
      .asFunction<int Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_realloc(
      _Block,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size)>>('_aligned_offset_realloc');
  late final __aligned_offset_realloc = __aligned_offset_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_offset_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
    int _Offset,
  ) {
    return __aligned_offset_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
      _Offset,
    );
  }

  late final __aligned_offset_recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size, ffi.Size)>>('_aligned_offset_recalloc');
  late final __aligned_offset_recalloc =
      __aligned_offset_recallocPtr.asFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, int, int, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_realloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_realloc(
      _Block,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_reallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size)>>('_aligned_realloc');
  late final __aligned_realloc = __aligned_reallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int)>();

  ffi.Pointer<ffi.Void> _aligned_recalloc(
    ffi.Pointer<ffi.Void> _Block,
    int _Count,
    int _Size,
    int _Alignment,
  ) {
    return __aligned_recalloc(
      _Block,
      _Count,
      _Size,
      _Alignment,
    );
  }

  late final __aligned_recallocPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, ffi.Size,
              ffi.Size, ffi.Size)>>('_aligned_recalloc');
  late final __aligned_recalloc = __aligned_recallocPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<ffi.Void>, int, int, int)>();

  ffi.Pointer<ffi.Int> _errno() {
    return __errno();
  }

  late final __errnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>('_errno');
  late final __errno = __errnoPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _set_errno(
    int _Value,
  ) {
    return __set_errno(
      _Value,
    );
  }

  late final __set_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_errno');
  late final __set_errno = __set_errnoPtr.asFunction<int Function(int)>();

  int _get_errno(
    ffi.Pointer<ffi.Int> _Value,
  ) {
    return __get_errno(
      _Value,
    );
  }

  late final __get_errnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_errno');
  late final __get_errno =
      __get_errnoPtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int __threadid() {
    return ___threadid();
  }

  late final ___threadidPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function()>>('__threadid');
  late final ___threadid = ___threadidPtr.asFunction<int Function()>();

  int __threadhandle() {
    return ___threadhandle();
  }

  late final ___threadhandlePtr =
      _lookup<ffi.NativeFunction<uintptr_t Function()>>('__threadhandle');
  late final ___threadhandle = ___threadhandlePtr.asFunction<int Function()>();

  ffi.Pointer<ffi.Void> bsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _bsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _bsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('bsearch_s');
  late final _bsearch_s = _bsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  void qsort_s(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return _qsort_s(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final _qsort_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Void>,
              rsize_t,
              rsize_t,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('qsort_s');
  late final _qsort_s = _qsort_sPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          _CoreCrtSecureSearchSortCompareFunction, ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> bsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _bsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _bsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Size,
              ffi.Size,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('bsearch');
  late final _bsearch = _bsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          int,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  void qsort(
    ffi.Pointer<ffi.Void> _Base,
    int _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _qsort(
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _qsortPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Void>, ffi.Size, ffi.Size,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('qsort');
  late final _qsort = _qsortPtr.asFunction<
      void Function(ffi.Pointer<ffi.Void>, int, int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> _lfind_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lfind_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lfind_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Size,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('_lfind_s');
  late final __lfind_s = __lfind_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return __lfind(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('_lfind');
  late final __lfind = __lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> _lsearch_s(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtSecureSearchSortCompareFunction _CompareFunction,
    ffi.Pointer<ffi.Void> _Context,
  ) {
    return __lsearch_s(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
      _Context,
    );
  }

  late final __lsearch_sPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.Size,
              _CoreCrtSecureSearchSortCompareFunction,
              ffi.Pointer<ffi.Void>)>>('_lsearch_s');
  late final __lsearch_s = __lsearch_sPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtSecureSearchSortCompareFunction,
          ffi.Pointer<ffi.Void>)>();

  ffi.Pointer<ffi.Void> _lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return __lsearch(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final __lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('_lsearch');
  late final __lsearch = __lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> lfind(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _lfind1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lfindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('lfind');
  late final _lfind1 = _lfindPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  ffi.Pointer<ffi.Void> lsearch(
    ffi.Pointer<ffi.Void> _Key,
    ffi.Pointer<ffi.Void> _Base,
    ffi.Pointer<ffi.UnsignedInt> _NumOfElements,
    int _SizeOfElements,
    _CoreCrtNonSecureSearchSortCompareFunction _CompareFunction,
  ) {
    return _lsearch1(
      _Key,
      _Base,
      _NumOfElements,
      _SizeOfElements,
      _CompareFunction,
    );
  }

  late final _lsearchPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.Void>,
              ffi.Pointer<ffi.UnsignedInt>,
              ffi.UnsignedInt,
              _CoreCrtNonSecureSearchSortCompareFunction)>>('lsearch');
  late final _lsearch1 = _lsearchPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.Void>,
          ffi.Pointer<ffi.UnsignedInt>,
          int,
          _CoreCrtNonSecureSearchSortCompareFunction)>();

  int _itow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int, ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_itow_s');
  late final __itow_s = __itow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _itow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __itow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Int, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_itow');
  late final __itow = __itowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ltow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Long, ffi.Pointer<ffi.WChar>, ffi.Size, ffi.Int)>>('_ltow_s');
  late final __ltow_s = __ltow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ltow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ltow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.Long, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ltow');
  late final __ltow = __ltowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ultow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLong, ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Int)>>('_ultow_s');
  late final __ultow_s = __ultow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ultow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ultow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ultow');
  late final __ultow = __ultowPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  double wcstod(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
  ) {
    return _wcstod(
      _String,
      _EndPtr,
    );
  }

  late final _wcstodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstod');
  late final _wcstod = _wcstodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double _wcstod_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>>('_wcstod_l');
  late final __wcstod_l = __wcstod_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>();

  int wcstol(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstol');
  late final _wcstol = _wcstolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstol_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstol_l');
  late final __wcstol_l = __wcstol_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoll(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoll');
  late final _wcstoll = _wcstollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoll_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoll_l');
  late final __wcstoll_l = __wcstoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoul(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoul');
  late final _wcstoul = _wcstoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoul_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoul_l');
  late final __wcstoul_l = __wcstoul_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int wcstoull(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return _wcstoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _wcstoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('wcstoull');
  late final _wcstoull = _wcstoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoull_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoull_l');
  late final __wcstoull_l = __wcstoull_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  double wcstof(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
  ) {
    return _wcstof(
      _String,
      _EndPtr,
    );
  }

  late final _wcstofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('wcstof');
  late final _wcstof = _wcstofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  double _wcstof_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __wcstof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __wcstof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>>('_wcstof_l');
  late final __wcstof_l = __wcstof_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.Pointer<ffi.WChar>>, _locale_t)>();

  double _wtof(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtof(
      _String,
    );
  }

  late final __wtofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtof');
  late final __wtof =
      __wtofPtr.asFunction<double Function(ffi.Pointer<ffi.WChar>)>();

  double _wtof_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtof_l(
      _String,
      _Locale,
    );
  }

  late final __wtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtof_l');
  late final __wtof_l = __wtof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtoi(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoi(
      _String,
    );
  }

  late final __wtoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtoi');
  late final __wtoi =
      __wtoiPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoi_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoi_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoi_l');
  late final __wtoi_l =
      __wtoi_lPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtol(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtol(
      _String,
    );
  }

  late final __wtolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.WChar>)>>(
          '_wtol');
  late final __wtol =
      __wtolPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtol_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtol_l(
      _String,
      _Locale,
    );
  }

  late final __wtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtol_l');
  late final __wtol_l =
      __wtol_lPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wtoll(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoll(
      _String,
    );
  }

  late final __wtollPtr = _lookup<
          ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.WChar>)>>(
      '_wtoll');
  late final __wtoll =
      __wtollPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoll_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoll_l(
      _String,
      _Locale,
    );
  }

  late final __wtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoll_l');
  late final __wtoll_l = __wtoll_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _i64tow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.LongLong, ffi.Pointer<ffi.WChar>, ffi.Size,
              ffi.Int)>>('_i64tow_s');
  late final __i64tow_s = __i64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _i64tow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __i64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(
              ffi.LongLong, ffi.Pointer<ffi.WChar>, ffi.Int)>>('_i64tow');
  late final __i64tow = __i64towPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _ui64tow_s(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64tow_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64tow_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLongLong, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Int)>>('_ui64tow_s');
  late final __ui64tow_s = __ui64tow_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.WChar>, int, int)>();

  ffi.Pointer<ffi.WChar> _ui64tow(
    int _Value,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _Radix,
  ) {
    return __ui64tow(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64towPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.WChar>, ffi.Int)>>('_ui64tow');
  late final __ui64tow = __ui64towPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(int, ffi.Pointer<ffi.WChar>, int)>();

  int _wtoi64(
    ffi.Pointer<ffi.WChar> _String,
  ) {
    return __wtoi64(
      _String,
    );
  }

  late final __wtoi64Ptr = _lookup<
          ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.WChar>)>>(
      '_wtoi64');
  late final __wtoi64 =
      __wtoi64Ptr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wtoi64_l(
    ffi.Pointer<ffi.WChar> _String,
    _locale_t _Locale,
  ) {
    return __wtoi64_l(
      _String,
      _Locale,
    );
  }

  late final __wtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>, _locale_t)>>('_wtoi64_l');
  late final __wtoi64_l = __wtoi64_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.WChar>, _locale_t)>();

  int _wcstoi64(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('_wcstoi64');
  late final __wcstoi64 = __wcstoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoi64_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoi64_l');
  late final __wcstoi64_l = __wcstoi64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  int _wcstoui64(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
  ) {
    return __wcstoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __wcstoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Int)>>('_wcstoui64');
  late final __wcstoui64 = __wcstoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>, int)>();

  int _wcstoui64_l(
    ffi.Pointer<ffi.WChar> _String,
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __wcstoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __wcstoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Int,
              _locale_t)>>('_wcstoui64_l');
  late final __wcstoui64_l = __wcstoui64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Pointer<ffi.WChar>>,
          int, _locale_t)>();

  ffi.Pointer<ffi.WChar> _wfullpath(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<ffi.WChar> _Path,
    int _BufferCount,
  ) {
    return __wfullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __wfullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wfullpath');
  late final __wfullpath = __wfullpathPtr.asFunction<
      ffi.Pointer<ffi.WChar> Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>, int)>();

  int _wmakepath_s(
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wmakepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wmakepath_s');
  late final __wmakepath_s = __wmakepath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  void _wmakepath(
    ffi.Pointer<ffi.WChar> _Buffer,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wmakepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wmakepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wmakepath');
  late final __wmakepath = __wmakepathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  void _wperror(
    ffi.Pointer<ffi.WChar> _ErrorMessage,
  ) {
    return __wperror(
      _ErrorMessage,
    );
  }

  late final __wperrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.WChar>)>>(
          '_wperror');
  late final __wperror =
      __wperrorPtr.asFunction<void Function(ffi.Pointer<ffi.WChar>)>();

  void _wsplitpath(
    ffi.Pointer<ffi.WChar> _FullPath,
    ffi.Pointer<ffi.WChar> _Drive,
    ffi.Pointer<ffi.WChar> _Dir,
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _Ext,
  ) {
    return __wsplitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __wsplitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wsplitpath');
  late final __wsplitpath = __wsplitpathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  int _wsplitpath_s(
    ffi.Pointer<ffi.WChar> _FullPath,
    ffi.Pointer<ffi.WChar> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.WChar> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.WChar> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.WChar> _Ext,
    int _ExtCount,
  ) {
    return __wsplitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __wsplitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('_wsplitpath_s');
  late final __wsplitpath_s = __wsplitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int,
          ffi.Pointer<ffi.WChar>,
          int)>();

  int _wdupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Buffer,
    ffi.Pointer<ffi.Size> _BufferCount,
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wdupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wdupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>)>>('_wdupenv_s');
  late final __wdupenv_s = __wdupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.WChar>)>();

  ffi.Pointer<ffi.WChar> _wgetenv(
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wgetenv(
      _VarName,
    );
  }

  late final __wgetenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>>('_wgetenv');
  late final __wgetenv = __wgetenvPtr
      .asFunction<ffi.Pointer<ffi.WChar> Function(ffi.Pointer<ffi.WChar>)>();

  int _wgetenv_s(
    ffi.Pointer<ffi.Size> _RequiredCount,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.WChar> _VarName,
  ) {
    return __wgetenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __wgetenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Pointer<ffi.WChar>)>>('_wgetenv_s');
  late final __wgetenv_s = __wgetenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.WChar>)>();

  int _wputenv(
    ffi.Pointer<ffi.WChar> _EnvString,
  ) {
    return __wputenv(
      _EnvString,
    );
  }

  late final __wputenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wputenv');
  late final __wputenv =
      __wputenvPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  int _wputenv_s(
    ffi.Pointer<ffi.WChar> _Name,
    ffi.Pointer<ffi.WChar> _Value,
  ) {
    return __wputenv_s(
      _Name,
      _Value,
    );
  }

  late final __wputenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>>('_wputenv_s');
  late final __wputenv_s = __wputenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>)>();

  int _wsearchenv_s(
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _VarName,
    ffi.Pointer<ffi.WChar> _Buffer,
    int _BufferCount,
  ) {
    return __wsearchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __wsearchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>, ffi.Size)>>('_wsearchenv_s');
  late final __wsearchenv_s = __wsearchenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>, int)>();

  void _wsearchenv(
    ffi.Pointer<ffi.WChar> _Filename,
    ffi.Pointer<ffi.WChar> _VarName,
    ffi.Pointer<ffi.WChar> _ResultPath,
  ) {
    return __wsearchenv(
      _Filename,
      _VarName,
      _ResultPath,
    );
  }

  late final __wsearchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
              ffi.Pointer<ffi.WChar>)>>('_wsearchenv');
  late final __wsearchenv = __wsearchenvPtr.asFunction<
      void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
          ffi.Pointer<ffi.WChar>)>();

  int _wsystem(
    ffi.Pointer<ffi.WChar> _Command,
  ) {
    return __wsystem(
      _Command,
    );
  }

  late final __wsystemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.WChar>)>>(
          '_wsystem');
  late final __wsystem =
      __wsystemPtr.asFunction<int Function(ffi.Pointer<ffi.WChar>)>();

  void _swab(
    ffi.Pointer<ffi.Char> _Buf1,
    ffi.Pointer<ffi.Char> _Buf2,
    int _SizeInBytes,
  ) {
    return __swab(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final __swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('_swab');
  late final __swab = __swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  void exit(
    int _Code,
  ) {
    return _exit1(
      _Code,
    );
  }

  late final _exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('exit');
  late final _exit1 = _exitPtr.asFunction<void Function(int)>();

  void _exit(
    int _Code,
  ) {
    return __exit(
      _Code,
    );
  }

  late final __exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_exit');
  late final __exit = __exitPtr.asFunction<void Function(int)>();

  void _Exit(
    int _Code,
  ) {
    return __Exit(
      _Code,
    );
  }

  late final __ExitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_Exit');
  late final __Exit = __ExitPtr.asFunction<void Function(int)>();

  void quick_exit(
    int _Code,
  ) {
    return _quick_exit(
      _Code,
    );
  }

  late final _quick_exitPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('quick_exit');
  late final _quick_exit = _quick_exitPtr.asFunction<void Function(int)>();

  void abort() {
    return _abort();
  }

  late final _abortPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function()>>('abort');
  late final _abort = _abortPtr.asFunction<void Function()>();

  int _set_abort_behavior(
    int _Flags,
    int _Mask,
  ) {
    return __set_abort_behavior(
      _Flags,
      _Mask,
    );
  }

  late final __set_abort_behaviorPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(
              ffi.UnsignedInt, ffi.UnsignedInt)>>('_set_abort_behavior');
  late final __set_abort_behavior =
      __set_abort_behaviorPtr.asFunction<int Function(int, int)>();

  int atexit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _atexit(
      arg0,
    );
  }

  late final _atexitPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>('atexit');
  late final _atexit = _atexitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  _onexit_t _onexit(
    _onexit_t _Func,
  ) {
    return __onexit(
      _Func,
    );
  }

  late final __onexitPtr =
      _lookup<ffi.NativeFunction<_onexit_t Function(_onexit_t)>>('_onexit');
  late final __onexit = __onexitPtr.asFunction<_onexit_t Function(_onexit_t)>();

  int at_quick_exit(
    ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>> arg0,
  ) {
    return _at_quick_exit(
      arg0,
    );
  }

  late final _at_quick_exitPtr = _lookup<
          ffi.NativeFunction<
              ffi.Int Function(
                  ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>>(
      'at_quick_exit');
  late final _at_quick_exit = _at_quick_exitPtr.asFunction<
      int Function(ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>)>();

  _purecall_handler _set_purecall_handler(
    _purecall_handler _Handler,
  ) {
    return __set_purecall_handler(
      _Handler,
    );
  }

  late final __set_purecall_handlerPtr = _lookup<
          ffi.NativeFunction<_purecall_handler Function(_purecall_handler)>>(
      '_set_purecall_handler');
  late final __set_purecall_handler = __set_purecall_handlerPtr
      .asFunction<_purecall_handler Function(_purecall_handler)>();

  _purecall_handler _get_purecall_handler() {
    return __get_purecall_handler();
  }

  late final __get_purecall_handlerPtr =
      _lookup<ffi.NativeFunction<_purecall_handler Function()>>(
          '_get_purecall_handler');
  late final __get_purecall_handler =
      __get_purecall_handlerPtr.asFunction<_purecall_handler Function()>();

  _invalid_parameter_handler _set_invalid_parameter_handler(
    _invalid_parameter_handler _Handler,
  ) {
    return __set_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_invalid_parameter_handlerPtr = _lookup<
      ffi.NativeFunction<
          _invalid_parameter_handler Function(
              _invalid_parameter_handler)>>('_set_invalid_parameter_handler');
  late final __set_invalid_parameter_handler =
      __set_invalid_parameter_handlerPtr.asFunction<
          _invalid_parameter_handler Function(_invalid_parameter_handler)>();

  _invalid_parameter_handler _get_invalid_parameter_handler() {
    return __get_invalid_parameter_handler();
  }

  late final __get_invalid_parameter_handlerPtr =
      _lookup<ffi.NativeFunction<_invalid_parameter_handler Function()>>(
          '_get_invalid_parameter_handler');
  late final __get_invalid_parameter_handler =
      __get_invalid_parameter_handlerPtr
          .asFunction<_invalid_parameter_handler Function()>();

  _invalid_parameter_handler _set_thread_local_invalid_parameter_handler(
    _invalid_parameter_handler _Handler,
  ) {
    return __set_thread_local_invalid_parameter_handler(
      _Handler,
    );
  }

  late final __set_thread_local_invalid_parameter_handlerPtr = _lookup<
          ffi.NativeFunction<
              _invalid_parameter_handler Function(_invalid_parameter_handler)>>(
      '_set_thread_local_invalid_parameter_handler');
  late final __set_thread_local_invalid_parameter_handler =
      __set_thread_local_invalid_parameter_handlerPtr.asFunction<
          _invalid_parameter_handler Function(_invalid_parameter_handler)>();

  _invalid_parameter_handler _get_thread_local_invalid_parameter_handler() {
    return __get_thread_local_invalid_parameter_handler();
  }

  late final __get_thread_local_invalid_parameter_handlerPtr =
      _lookup<ffi.NativeFunction<_invalid_parameter_handler Function()>>(
          '_get_thread_local_invalid_parameter_handler');
  late final __get_thread_local_invalid_parameter_handler =
      __get_thread_local_invalid_parameter_handlerPtr
          .asFunction<_invalid_parameter_handler Function()>();

  int _set_error_mode(
    int _Mode,
  ) {
    return __set_error_mode(
      _Mode,
    );
  }

  late final __set_error_modePtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('_set_error_mode');
  late final __set_error_mode =
      __set_error_modePtr.asFunction<int Function(int)>();

  ffi.Pointer<ffi.UnsignedLong> __doserrno() {
    return ___doserrno();
  }

  late final ___doserrnoPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.UnsignedLong> Function()>>(
          '__doserrno');
  late final ___doserrno =
      ___doserrnoPtr.asFunction<ffi.Pointer<ffi.UnsignedLong> Function()>();

  int _set_doserrno(
    int _Value,
  ) {
    return __set_doserrno(
      _Value,
    );
  }

  late final __set_doserrnoPtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.UnsignedLong)>>(
          '_set_doserrno');
  late final __set_doserrno = __set_doserrnoPtr.asFunction<int Function(int)>();

  int _get_doserrno(
    ffi.Pointer<ffi.UnsignedLong> _Value,
  ) {
    return __get_doserrno(
      _Value,
    );
  }

  late final __get_doserrnoPtr = _lookup<
          ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.UnsignedLong>)>>(
      '_get_doserrno');
  late final __get_doserrno = __get_doserrnoPtr
      .asFunction<int Function(ffi.Pointer<ffi.UnsignedLong>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __sys_errlist() {
    return ___sys_errlist();
  }

  late final ___sys_errlistPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__sys_errlist');
  late final ___sys_errlist = ___sys_errlistPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Int> __sys_nerr() {
    return ___sys_nerr();
  }

  late final ___sys_nerrPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__sys_nerr');
  late final ___sys_nerr =
      ___sys_nerrPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  void perror(
    ffi.Pointer<ffi.Char> _ErrMsg,
  ) {
    return _perror(
      _ErrMsg,
    );
  }

  late final _perrorPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Char>)>>(
          'perror');
  late final _perror =
      _perrorPtr.asFunction<void Function(ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Pointer<ffi.Char>> __p__pgmptr() {
    return ___p__pgmptr();
  }

  late final ___p__pgmptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>>(
      '__p__pgmptr');
  late final ___p__pgmptr = ___p__pgmptrPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Char>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.WChar>> __p__wpgmptr() {
    return ___p__wpgmptr();
  }

  late final ___p__wpgmptrPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Pointer<ffi.WChar>> Function()>>(
      '__p__wpgmptr');
  late final ___p__wpgmptr = ___p__wpgmptrPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.WChar>> Function()>();

  ffi.Pointer<ffi.Int> __p__fmode() {
    return ___p__fmode();
  }

  late final ___p__fmodePtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p__fmode');
  late final ___p__fmode =
      ___p__fmodePtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  int _get_pgmptr(
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Value,
  ) {
    return __get_pgmptr(
      _Value,
    );
  }

  late final __get_pgmptrPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('_get_pgmptr');
  late final __get_pgmptr = __get_pgmptrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int _get_wpgmptr(
    ffi.Pointer<ffi.Pointer<ffi.WChar>> _Value,
  ) {
    return __get_wpgmptr(
      _Value,
    );
  }

  late final __get_wpgmptrPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Pointer<ffi.WChar>>)>>('_get_wpgmptr');
  late final __get_wpgmptr = __get_wpgmptrPtr
      .asFunction<int Function(ffi.Pointer<ffi.Pointer<ffi.WChar>>)>();

  int _set_fmode(
    int _Mode,
  ) {
    return __set_fmode(
      _Mode,
    );
  }

  late final __set_fmodePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Int)>>('_set_fmode');
  late final __set_fmode = __set_fmodePtr.asFunction<int Function(int)>();

  int _get_fmode(
    ffi.Pointer<ffi.Int> _PMode,
  ) {
    return __get_fmode(
      _PMode,
    );
  }

  late final __get_fmodePtr =
      _lookup<ffi.NativeFunction<errno_t Function(ffi.Pointer<ffi.Int>)>>(
          '_get_fmode');
  late final __get_fmode =
      __get_fmodePtr.asFunction<int Function(ffi.Pointer<ffi.Int>)>();

  int abs(
    int _Number,
  ) {
    return _abs(
      _Number,
    );
  }

  late final _absPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Int)>>('abs');
  late final _abs = _absPtr.asFunction<int Function(int)>();

  int labs(
    int _Number,
  ) {
    return _labs(
      _Number,
    );
  }

  late final _labsPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Long)>>('labs');
  late final _labs = _labsPtr.asFunction<int Function(int)>();

  int llabs(
    int _Number,
  ) {
    return _llabs(
      _Number,
    );
  }

  late final _llabsPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>('llabs');
  late final _llabs = _llabsPtr.asFunction<int Function(int)>();

  int _abs64(
    int _Number,
  ) {
    return __abs64(
      _Number,
    );
  }

  late final __abs64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.LongLong)>>(
          '_abs64');
  late final __abs64 = __abs64Ptr.asFunction<int Function(int)>();

  int _byteswap_ushort(
    int _Number,
  ) {
    return __byteswap_ushort(
      _Number,
    );
  }

  late final __byteswap_ushortPtr = _lookup<
          ffi.NativeFunction<ffi.UnsignedShort Function(ffi.UnsignedShort)>>(
      '_byteswap_ushort');
  late final __byteswap_ushort =
      __byteswap_ushortPtr.asFunction<int Function(int)>();

  int _byteswap_ulong(
    int _Number,
  ) {
    return __byteswap_ulong(
      _Number,
    );
  }

  late final __byteswap_ulongPtr =
      _lookup<ffi.NativeFunction<ffi.UnsignedLong Function(ffi.UnsignedLong)>>(
          '_byteswap_ulong');
  late final __byteswap_ulong =
      __byteswap_ulongPtr.asFunction<int Function(int)>();

  int _byteswap_uint64(
    int _Number,
  ) {
    return __byteswap_uint64(
      _Number,
    );
  }

  late final __byteswap_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong)>>('_byteswap_uint64');
  late final __byteswap_uint64 =
      __byteswap_uint64Ptr.asFunction<int Function(int)>();

  div_t div(
    int _Numerator,
    int _Denominator,
  ) {
    return _div(
      _Numerator,
      _Denominator,
    );
  }

  late final _divPtr =
      _lookup<ffi.NativeFunction<div_t Function(ffi.Int, ffi.Int)>>('div');
  late final _div = _divPtr.asFunction<div_t Function(int, int)>();

  ldiv_t ldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _ldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _ldivPtr =
      _lookup<ffi.NativeFunction<ldiv_t Function(ffi.Long, ffi.Long)>>('ldiv');
  late final _ldiv = _ldivPtr.asFunction<ldiv_t Function(int, int)>();

  lldiv_t lldiv(
    int _Numerator,
    int _Denominator,
  ) {
    return _lldiv(
      _Numerator,
      _Denominator,
    );
  }

  late final _lldivPtr =
      _lookup<ffi.NativeFunction<lldiv_t Function(ffi.LongLong, ffi.LongLong)>>(
          'lldiv');
  late final _lldiv = _lldivPtr.asFunction<lldiv_t Function(int, int)>();

  int _rotl(
    int _Value,
    int _Shift,
  ) {
    return __rotl(
      _Value,
      _Shift,
    );
  }

  late final __rotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotl');
  late final __rotl = __rotlPtr.asFunction<int Function(int, int)>();

  int _lrotl(
    int _Value,
    int _Shift,
  ) {
    return __lrotl(
      _Value,
      _Shift,
    );
  }

  late final __lrotlPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.Int)>>('_lrotl');
  late final __lrotl = __lrotlPtr.asFunction<int Function(int, int)>();

  int _rotl64(
    int _Value,
    int _Shift,
  ) {
    return __rotl64(
      _Value,
      _Shift,
    );
  }

  late final __rotl64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotl64');
  late final __rotl64 = __rotl64Ptr.asFunction<int Function(int, int)>();

  int _rotr(
    int _Value,
    int _Shift,
  ) {
    return __rotr(
      _Value,
      _Shift,
    );
  }

  late final __rotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedInt Function(ffi.UnsignedInt, ffi.Int)>>('_rotr');
  late final __rotr = __rotrPtr.asFunction<int Function(int, int)>();

  int _lrotr(
    int _Value,
    int _Shift,
  ) {
    return __lrotr(
      _Value,
      _Shift,
    );
  }

  late final __lrotrPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.UnsignedLong, ffi.Int)>>('_lrotr');
  late final __lrotr = __lrotrPtr.asFunction<int Function(int, int)>();

  int _rotr64(
    int _Value,
    int _Shift,
  ) {
    return __rotr64(
      _Value,
      _Shift,
    );
  }

  late final __rotr64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.UnsignedLongLong, ffi.Int)>>('_rotr64');
  late final __rotr64 = __rotr64Ptr.asFunction<int Function(int, int)>();

  void srand(
    int _Seed,
  ) {
    return _srand(
      _Seed,
    );
  }

  late final _srandPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedInt)>>('srand');
  late final _srand = _srandPtr.asFunction<void Function(int)>();

  int rand() {
    return _rand();
  }

  late final _randPtr = _lookup<ffi.NativeFunction<ffi.Int Function()>>('rand');
  late final _rand = _randPtr.asFunction<int Function()>();

  double atof(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atof(
      _String,
    );
  }

  late final _atofPtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(ffi.Pointer<ffi.Char>)>>(
          'atof');
  late final _atof =
      _atofPtr.asFunction<double Function(ffi.Pointer<ffi.Char>)>();

  int atoi(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atoi(
      _String,
    );
  }

  late final _atoiPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'atoi');
  late final _atoi = _atoiPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atol(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atol(
      _String,
    );
  }

  late final _atolPtr =
      _lookup<ffi.NativeFunction<ffi.Long Function(ffi.Pointer<ffi.Char>)>>(
          'atol');
  late final _atol = _atolPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int atoll(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return _atoll(
      _String,
    );
  }

  late final _atollPtr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          'atoll');
  late final _atoll =
      _atollPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _atoi64(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoi64(
      _String,
    );
  }

  late final __atoi64Ptr =
      _lookup<ffi.NativeFunction<ffi.LongLong Function(ffi.Pointer<ffi.Char>)>>(
          '_atoi64');
  late final __atoi64 =
      __atoi64Ptr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  double _atof_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atof_l(
      _String,
      _Locale,
    );
  }

  late final __atof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atof_l');
  late final __atof_l = __atof_lPtr
      .asFunction<double Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoi_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoi_l(
      _String,
      _Locale,
    );
  }

  late final __atoi_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atoi_l');
  late final __atoi_l =
      __atoi_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atol_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atol_l(
      _String,
      _Locale,
    );
  }

  late final __atol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atol_l');
  late final __atol_l =
      __atol_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoll_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoll_l(
      _String,
      _Locale,
    );
  }

  late final __atoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_atoll_l');
  late final __atoll_l =
      __atoll_lPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoi64_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoi64_l(
      _String,
      _Locale,
    );
  }

  late final __atoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>, _locale_t)>>('_atoi64_l');
  late final __atoi64_l = __atoi64_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoflt(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoflt(
      _Result,
      _String,
    );
  }

  late final __atofltPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>)>>('_atoflt');
  late final __atoflt = __atofltPtr.asFunction<
      int Function(ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>)>();

  int _atodbl(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atodbl(
      _Result,
      _String,
    );
  }

  late final __atodblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>)>>('_atodbl');
  late final __atodbl = __atodblPtr.asFunction<
      int Function(ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>)>();

  int _atoldbl(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __atoldbl(
      _Result,
      _String,
    );
  }

  late final __atoldblPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>)>>('_atoldbl');
  late final __atoldbl = __atoldblPtr
      .asFunction<int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>)>();

  int _atoflt_l(
    ffi.Pointer<_CRT_FLOAT> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoflt_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoflt_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atoflt_l');
  late final __atoflt_l = __atoflt_lPtr.asFunction<
      int Function(
          ffi.Pointer<_CRT_FLOAT>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atodbl_l(
    ffi.Pointer<_CRT_DOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atodbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atodbl_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atodbl_l');
  late final __atodbl_l = __atodbl_lPtr.asFunction<
      int Function(
          ffi.Pointer<_CRT_DOUBLE>, ffi.Pointer<ffi.Char>, _locale_t)>();

  int _atoldbl_l(
    ffi.Pointer<_LDOUBLE> _Result,
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __atoldbl_l(
      _Result,
      _String,
      _Locale,
    );
  }

  late final __atoldbl_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>,
              _locale_t)>>('_atoldbl_l');
  late final __atoldbl_l = __atoldbl_lPtr.asFunction<
      int Function(ffi.Pointer<_LDOUBLE>, ffi.Pointer<ffi.Char>, _locale_t)>();

  double strtof(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
  ) {
    return _strtof(
      _String,
      _EndPtr,
    );
  }

  late final _strtofPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtof');
  late final _strtof = _strtofPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double _strtof_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __strtof_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtof_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, _locale_t)>>('_strtof_l');
  late final __strtof_l = __strtof_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          _locale_t)>();

  double strtod(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
  ) {
    return _strtod(
      _String,
      _EndPtr,
    );
  }

  late final _strtodPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('strtod');
  late final _strtod = _strtodPtr.asFunction<
      double Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  double _strtod_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    _locale_t _Locale,
  ) {
    return __strtod_l(
      _String,
      _EndPtr,
      _Locale,
    );
  }

  late final __strtod_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, _locale_t)>>('_strtod_l');
  late final __strtod_l = __strtod_lPtr.asFunction<
      double Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          _locale_t)>();

  int strtol(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtol(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtolPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtol');
  late final _strtol = _strtolPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtol_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtol_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtol_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Long Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtol_l');
  late final __strtol_l = __strtol_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoll(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoll(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtollPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoll');
  late final _strtoll = _strtollPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoll_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoll_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoll_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoll_l');
  late final __strtoll_l = __strtoll_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoul(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoul(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoulPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoul');
  late final _strtoul = _strtoulPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoul_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoul_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoul_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoul_l');
  late final __strtoul_l = __strtoul_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int strtoull(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return _strtoull(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final _strtoullPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('strtoull');
  late final _strtoull = _strtoullPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoull_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoull_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoull_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoull_l');
  late final __strtoull_l = __strtoull_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _strtoi64(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return __strtoi64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoi64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('_strtoi64');
  late final __strtoi64 = __strtoi64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoi64_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoi64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoi64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.LongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoi64_l');
  late final __strtoi64_l = __strtoi64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _strtoui64(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
  ) {
    return __strtoui64(
      _String,
      _EndPtr,
      _Radix,
    );
  }

  late final __strtoui64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Int)>>('_strtoui64');
  late final __strtoui64 = __strtoui64Ptr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>, int)>();

  int _strtoui64_l(
    ffi.Pointer<ffi.Char> _String,
    ffi.Pointer<ffi.Pointer<ffi.Char>> _EndPtr,
    int _Radix,
    _locale_t _Locale,
  ) {
    return __strtoui64_l(
      _String,
      _EndPtr,
      _Radix,
      _Locale,
    );
  }

  late final __strtoui64_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.UnsignedLongLong Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Int,
              _locale_t)>>('_strtoui64_l');
  late final __strtoui64_l = __strtoui64_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          int, _locale_t)>();

  int _itoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __itoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __itoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_itoa_s');
  late final __itoa_s = __itoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _itoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __itoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('_itoa');
  late final __itoa = __itoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ltoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ltoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ltoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Size, ffi.Int)>>('_ltoa_s');
  late final __ltoa_s = __ltoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ltoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ltoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Int)>>('_ltoa');
  late final __ltoa = __ltoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ultoa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ultoa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ultoa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int)>>('_ultoa_s');
  late final __ultoa_s = __ultoa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ultoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ultoa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('_ultoa');
  late final __ultoa = __ultoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _i64toa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __i64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __i64toa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.LongLong, ffi.Pointer<ffi.Char>, ffi.Size,
              ffi.Int)>>('_i64toa_s');
  late final __i64toa_s = __i64toa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _i64toa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __i64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __i64toaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.LongLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('_i64toa');
  late final __i64toa = __i64toaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ui64toa_s(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    int _Radix,
  ) {
    return __ui64toa_s(
      _Value,
      _Buffer,
      _BufferCount,
      _Radix,
    );
  }

  late final __ui64toa_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.UnsignedLongLong, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Int)>>('_ui64toa_s');
  late final __ui64toa_s = __ui64toa_sPtr
      .asFunction<int Function(int, ffi.Pointer<ffi.Char>, int, int)>();

  ffi.Pointer<ffi.Char> _ui64toa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return __ui64toa(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final __ui64toaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.UnsignedLongLong,
              ffi.Pointer<ffi.Char>, ffi.Int)>>('_ui64toa');
  late final __ui64toa = __ui64toaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int _ecvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __ecvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_ecvt_s');
  late final __ecvt_s = __ecvt_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> _ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __ecvt(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_ecvt');
  late final __ecvt = __ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int _fcvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __fcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_fcvt_s');
  late final __fcvt_s = __fcvt_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, int, double, int,
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> _fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return __fcvt(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final __fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('_fcvt');
  late final __fcvt = __fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  int _gcvt_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    double _Value,
    int _DigitCount,
  ) {
    return __gcvt_s(
      _Buffer,
      _BufferCount,
      _Value,
      _DigitCount,
    );
  }

  late final __gcvt_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Size, ffi.Double,
              ffi.Int)>>('_gcvt_s');
  late final __gcvt_s = __gcvt_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, double, int)>();

  ffi.Pointer<ffi.Char> _gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __gcvt(
      _Value,
      _DigitCount,
      _Buffer,
    );
  }

  late final __gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('_gcvt');
  late final __gcvt = __gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  int ___mb_cur_max_func() {
    return ____mb_cur_max_func();
  }

  late final ____mb_cur_max_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function()>>('___mb_cur_max_func');
  late final ____mb_cur_max_func =
      ____mb_cur_max_funcPtr.asFunction<int Function()>();

  int ___mb_cur_max_l_func(
    _locale_t _Locale,
  ) {
    return ____mb_cur_max_l_func(
      _Locale,
    );
  }

  late final ____mb_cur_max_l_funcPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(_locale_t)>>(
          '___mb_cur_max_l_func');
  late final ____mb_cur_max_l_func =
      ____mb_cur_max_l_funcPtr.asFunction<int Function(_locale_t)>();

  int mblen(
    ffi.Pointer<ffi.Char> _Ch,
    int _MaxCount,
  ) {
    return _mblen(
      _Ch,
      _MaxCount,
    );
  }

  late final _mblenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('mblen');
  late final _mblen =
      _mblenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _mblen_l(
    ffi.Pointer<ffi.Char> _Ch,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mblen_l(
      _Ch,
      _MaxCount,
      _Locale,
    );
  }

  late final __mblen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_mblen_l');
  late final __mblen_l = __mblen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _mbstrlen(
    ffi.Pointer<ffi.Char> _String,
  ) {
    return __mbstrlen(
      _String,
    );
  }

  late final __mbstrlenPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function(ffi.Pointer<ffi.Char>)>>(
          '_mbstrlen');
  late final __mbstrlen =
      __mbstrlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _mbstrlen_l(
    ffi.Pointer<ffi.Char> _String,
    _locale_t _Locale,
  ) {
    return __mbstrlen_l(
      _String,
      _Locale,
    );
  }

  late final __mbstrlen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, _locale_t)>>('_mbstrlen_l');
  late final __mbstrlen_l = __mbstrlen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, _locale_t)>();

  int _mbstrnlen(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
  ) {
    return __mbstrnlen(
      _String,
      _MaxCount,
    );
  }

  late final __mbstrnlenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Size)>>('_mbstrnlen');
  late final __mbstrnlen =
      __mbstrnlenPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _mbstrnlen_l(
    ffi.Pointer<ffi.Char> _String,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstrnlen_l(
      _String,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstrnlen_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(
              ffi.Pointer<ffi.Char>, ffi.Size, _locale_t)>>('_mbstrnlen_l');
  late final __mbstrnlen_l = __mbstrnlen_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int mbtowc(
    ffi.Pointer<ffi.WChar> _DstCh,
    ffi.Pointer<ffi.Char> _SrcCh,
    int _SrcSizeInBytes,
  ) {
    return _mbtowc(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
    );
  }

  late final _mbtowcPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbtowc');
  late final _mbtowc = _mbtowcPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _mbtowc_l(
    ffi.Pointer<ffi.WChar> _DstCh,
    ffi.Pointer<ffi.Char> _SrcCh,
    int _SrcSizeInBytes,
    _locale_t _Locale,
  ) {
    return __mbtowc_l(
      _DstCh,
      _SrcCh,
      _SrcSizeInBytes,
      _Locale,
    );
  }

  late final __mbtowc_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_mbtowc_l');
  late final __mbtowc_l = __mbtowc_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int mbstowcs_s(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.WChar> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Char> _SrcBuf,
    int _MaxCount,
  ) {
    return _mbstowcs_s(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
    );
  }

  late final _mbstowcs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>,
              ffi.Size, ffi.Pointer<ffi.Char>, ffi.Size)>>('mbstowcs_s');
  late final _mbstowcs_s = _mbstowcs_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.Char>, int)>();

  int mbstowcs(
    ffi.Pointer<ffi.WChar> _Dest,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
  ) {
    return _mbstowcs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _mbstowcsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size)>>('mbstowcs');
  late final _mbstowcs = _mbstowcsPtr.asFunction<
      int Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int)>();

  int _mbstowcs_s_l(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.WChar> _DstBuf,
    int _SizeInWords,
    ffi.Pointer<ffi.Char> _SrcBuf,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstowcs_s_l(
      _PtNumOfCharConverted,
      _DstBuf,
      _SizeInWords,
      _SrcBuf,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              _locale_t)>>('_mbstowcs_s_l');
  late final __mbstowcs_s_l = __mbstowcs_s_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.WChar>, int,
          ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int _mbstowcs_l(
    ffi.Pointer<ffi.WChar> _Dest,
    ffi.Pointer<ffi.Char> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __mbstowcs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __mbstowcs_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>,
              ffi.Size, _locale_t)>>('_mbstowcs_l');
  late final __mbstowcs_l = __mbstowcs_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int wctomb(
    ffi.Pointer<ffi.Char> _MbCh,
    int _WCh,
  ) {
    return _wctomb(
      _MbCh,
      _WCh,
    );
  }

  late final _wctombPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(ffi.Pointer<ffi.Char>, ffi.WChar)>>('wctomb');
  late final _wctomb =
      _wctombPtr.asFunction<int Function(ffi.Pointer<ffi.Char>, int)>();

  int _wctomb_l(
    ffi.Pointer<ffi.Char> _MbCh,
    int _WCh,
    _locale_t _Locale,
  ) {
    return __wctomb_l(
      _MbCh,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int Function(
              ffi.Pointer<ffi.Char>, ffi.WChar, _locale_t)>>('_wctomb_l');
  late final __wctomb_l = __wctomb_lPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, int, _locale_t)>();

  int wctomb_s(
    ffi.Pointer<ffi.Int> _SizeConverted,
    ffi.Pointer<ffi.Char> _MbCh,
    int _SizeInBytes,
    int _WCh,
  ) {
    return _wctomb_s(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
    );
  }

  late final _wctomb_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, rsize_t,
              ffi.WChar)>>('wctomb_s');
  late final _wctomb_s = _wctomb_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, int)>();

  int _wctomb_s_l(
    ffi.Pointer<ffi.Int> _SizeConverted,
    ffi.Pointer<ffi.Char> _MbCh,
    int _SizeInBytes,
    int _WCh,
    _locale_t _Locale,
  ) {
    return __wctomb_s_l(
      _SizeConverted,
      _MbCh,
      _SizeInBytes,
      _WCh,
      _Locale,
    );
  }

  late final __wctomb_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.WChar, _locale_t)>>('_wctomb_s_l');
  late final __wctomb_s_l = __wctomb_s_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Char>, int, int, _locale_t)>();

  int wcstombs_s(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Char> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.WChar> _Src,
    int _MaxCountInBytes,
  ) {
    return _wcstombs_s(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
    );
  }

  late final _wcstombs_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              ffi.Size, ffi.Pointer<ffi.WChar>, ffi.Size)>>('wcstombs_s');
  late final _wcstombs_s = _wcstombs_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.WChar>, int)>();

  int wcstombs(
    ffi.Pointer<ffi.Char> _Dest,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
  ) {
    return _wcstombs(
      _Dest,
      _Source,
      _MaxCount,
    );
  }

  late final _wcstombsPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size)>>('wcstombs');
  late final _wcstombs = _wcstombsPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int)>();

  int _wcstombs_s_l(
    ffi.Pointer<ffi.Size> _PtNumOfCharConverted,
    ffi.Pointer<ffi.Char> _Dst,
    int _DstSizeInBytes,
    ffi.Pointer<ffi.WChar> _Src,
    int _MaxCountInBytes,
    _locale_t _Locale,
  ) {
    return __wcstombs_s_l(
      _PtNumOfCharConverted,
      _Dst,
      _DstSizeInBytes,
      _Src,
      _MaxCountInBytes,
      _Locale,
    );
  }

  late final __wcstombs_s_lPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Size>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.WChar>,
              ffi.Size,
              _locale_t)>>('_wcstombs_s_l');
  late final __wcstombs_s_l = __wcstombs_s_lPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  int _wcstombs_l(
    ffi.Pointer<ffi.Char> _Dest,
    ffi.Pointer<ffi.WChar> _Source,
    int _MaxCount,
    _locale_t _Locale,
  ) {
    return __wcstombs_l(
      _Dest,
      _Source,
      _MaxCount,
      _Locale,
    );
  }

  late final __wcstombs_lPtr = _lookup<
      ffi.NativeFunction<
          ffi.Size Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>,
              ffi.Size, _locale_t)>>('_wcstombs_l');
  late final __wcstombs_l = __wcstombs_lPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.WChar>, int, _locale_t)>();

  ffi.Pointer<ffi.Char> _fullpath(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<ffi.Char> _Path,
    int _BufferCount,
  ) {
    return __fullpath(
      _Buffer,
      _Path,
      _BufferCount,
    );
  }

  late final __fullpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('_fullpath');
  late final __fullpath = __fullpathPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  int _makepath_s(
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __makepath_s(
      _Buffer,
      _BufferCount,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_makepath_s');
  late final __makepath_s = __makepath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _makepath(
    ffi.Pointer<ffi.Char> _Buffer,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __makepath(
      _Buffer,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __makepathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_makepath');
  late final __makepath = __makepathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _splitpath(
    ffi.Pointer<ffi.Char> _FullPath,
    ffi.Pointer<ffi.Char> _Drive,
    ffi.Pointer<ffi.Char> _Dir,
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _Ext,
  ) {
    return __splitpath(
      _FullPath,
      _Drive,
      _Dir,
      _Filename,
      _Ext,
    );
  }

  late final __splitpathPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_splitpath');
  late final __splitpath = __splitpathPtr.asFunction<
      void Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  int _splitpath_s(
    ffi.Pointer<ffi.Char> _FullPath,
    ffi.Pointer<ffi.Char> _Drive,
    int _DriveCount,
    ffi.Pointer<ffi.Char> _Dir,
    int _DirCount,
    ffi.Pointer<ffi.Char> _Filename,
    int _FilenameCount,
    ffi.Pointer<ffi.Char> _Ext,
    int _ExtCount,
  ) {
    return __splitpath_s(
      _FullPath,
      _Drive,
      _DriveCount,
      _Dir,
      _DirCount,
      _Filename,
      _FilenameCount,
      _Ext,
      _ExtCount,
    );
  }

  late final __splitpath_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size,
              ffi.Pointer<ffi.Char>,
              ffi.Size)>>('_splitpath_s');
  late final __splitpath_s = __splitpath_sPtr.asFunction<
      int Function(
          ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int,
          ffi.Pointer<ffi.Char>,
          int)>();

  int getenv_s(
    ffi.Pointer<ffi.Size> _RequiredCount,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return _getenv_s(
      _RequiredCount,
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final _getenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>,
              rsize_t, ffi.Pointer<ffi.Char>)>>('getenv_s');
  late final _getenv_s = _getenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>, int,
          ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Int> __p___argc() {
    return ___p___argc();
  }

  late final ___p___argcPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Int> Function()>>(
          '__p___argc');
  late final ___p___argc =
      ___p___argcPtr.asFunction<ffi.Pointer<ffi.Int> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> __p___argv() {
    return ___p___argv();
  }

  late final ___p___argvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
              Function()>>('__p___argv');
  late final ___p___argv = ___p___argvPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> __p___wargv() {
    return ___p___wargv();
  }

  late final ___p___wargvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>>
              Function()>>('__p___wargv');
  late final ___p___wargv = ___p___wargvPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> __p__environ() {
    return ___p__environ();
  }

  late final ___p__environPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>>
              Function()>>('__p__environ');
  late final ___p__environ = ___p__environPtr
      .asFunction<ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.Char>>> Function()>();

  ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> __p__wenviron() {
    return ___p__wenviron();
  }

  late final ___p__wenvironPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>>
              Function()>>('__p__wenviron');
  late final ___p__wenviron = ___p__wenvironPtr.asFunction<
      ffi.Pointer<ffi.Pointer<ffi.Pointer<ffi.WChar>>> Function()>();

  ffi.Pointer<ffi.Char> getenv(
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return _getenv(
      _VarName,
    );
  }

  late final _getenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>>('getenv');
  late final _getenv = _getenvPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<ffi.Char>)>();

  int _dupenv_s(
    ffi.Pointer<ffi.Pointer<ffi.Char>> _Buffer,
    ffi.Pointer<ffi.Size> _BufferCount,
    ffi.Pointer<ffi.Char> _VarName,
  ) {
    return __dupenv_s(
      _Buffer,
      _BufferCount,
      _VarName,
    );
  }

  late final __dupenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Size>, ffi.Pointer<ffi.Char>)>>('_dupenv_s');
  late final __dupenv_s = __dupenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Pointer<ffi.Char>>, ffi.Pointer<ffi.Size>,
          ffi.Pointer<ffi.Char>)>();

  int system(
    ffi.Pointer<ffi.Char> _Command,
  ) {
    return _system(
      _Command,
    );
  }

  late final _systemPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'system');
  late final _system =
      _systemPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putenv(
    ffi.Pointer<ffi.Char> _EnvString,
  ) {
    return __putenv(
      _EnvString,
    );
  }

  late final __putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          '_putenv');
  late final __putenv =
      __putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  int _putenv_s(
    ffi.Pointer<ffi.Char> _Name,
    ffi.Pointer<ffi.Char> _Value,
  ) {
    return __putenv_s(
      _Name,
      _Value,
    );
  }

  late final __putenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>>('_putenv_s');
  late final __putenv_s = __putenv_sPtr
      .asFunction<int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  int _searchenv_s(
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _VarName,
    ffi.Pointer<ffi.Char> _Buffer,
    int _BufferCount,
  ) {
    return __searchenv_s(
      _Filename,
      _VarName,
      _Buffer,
      _BufferCount,
    );
  }

  late final __searchenv_sPtr = _lookup<
      ffi.NativeFunction<
          errno_t Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>, ffi.Size)>>('_searchenv_s');
  late final __searchenv_s = __searchenv_sPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, int)>();

  void _searchenv(
    ffi.Pointer<ffi.Char> _Filename,
    ffi.Pointer<ffi.Char> _VarName,
    ffi.Pointer<ffi.Char> _Buffer,
  ) {
    return __searchenv(
      _Filename,
      _VarName,
      _Buffer,
    );
  }

  late final __searchenvPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('_searchenv');
  late final __searchenv = __searchenvPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>)>();

  void _seterrormode(
    int _Mode,
  ) {
    return __seterrormode(
      _Mode,
    );
  }

  late final __seterrormodePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Int)>>('_seterrormode');
  late final __seterrormode =
      __seterrormodePtr.asFunction<void Function(int)>();

  void _beep(
    int _Frequency,
    int _Duration,
  ) {
    return __beep(
      _Frequency,
      _Duration,
    );
  }

  late final __beepPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.UnsignedInt, ffi.UnsignedInt)>>('_beep');
  late final __beep = __beepPtr.asFunction<void Function(int, int)>();

  void _sleep(
    int _Duration,
  ) {
    return __sleep(
      _Duration,
    );
  }

  late final __sleepPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.UnsignedLong)>>(
          '_sleep');
  late final __sleep = __sleepPtr.asFunction<void Function(int)>();

  ffi.Pointer<ffi.Char> ecvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return _ecvt1(
      _Value,
      _DigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _ecvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('ecvt');
  late final _ecvt1 = _ecvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> fcvt(
    double _Value,
    int _FractionalDigitCount,
    ffi.Pointer<ffi.Int> _PtDec,
    ffi.Pointer<ffi.Int> _PtSign,
  ) {
    return _fcvt1(
      _Value,
      _FractionalDigitCount,
      _PtDec,
      _PtSign,
    );
  }

  late final _fcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Double, ffi.Int,
              ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>>('fcvt');
  late final _fcvt1 = _fcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(
          double, int, ffi.Pointer<ffi.Int>, ffi.Pointer<ffi.Int>)>();

  ffi.Pointer<ffi.Char> gcvt(
    double _Value,
    int _DigitCount,
    ffi.Pointer<ffi.Char> _DstBuf,
  ) {
    return _gcvt1(
      _Value,
      _DigitCount,
      _DstBuf,
    );
  }

  late final _gcvtPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Double, ffi.Int, ffi.Pointer<ffi.Char>)>>('gcvt');
  late final _gcvt1 = _gcvtPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(double, int, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Char> itoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _itoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _itoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Int, ffi.Pointer<ffi.Char>, ffi.Int)>>('itoa');
  late final _itoa1 = _itoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ltoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _ltoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ltoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Long, ffi.Pointer<ffi.Char>, ffi.Int)>>('ltoa');
  late final _ltoa1 = _ltoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  void swab(
    ffi.Pointer<ffi.Char> _Buf1,
    ffi.Pointer<ffi.Char> _Buf2,
    int _SizeInBytes,
  ) {
    return _swab1(
      _Buf1,
      _Buf2,
      _SizeInBytes,
    );
  }

  late final _swabPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, ffi.Int)>>('swab');
  late final _swab1 = _swabPtr.asFunction<
      void Function(ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>, int)>();

  ffi.Pointer<ffi.Char> ultoa(
    int _Value,
    ffi.Pointer<ffi.Char> _Buffer,
    int _Radix,
  ) {
    return _ultoa1(
      _Value,
      _Buffer,
      _Radix,
    );
  }

  late final _ultoaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.UnsignedLong, ffi.Pointer<ffi.Char>, ffi.Int)>>('ultoa');
  late final _ultoa1 = _ultoaPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(int, ffi.Pointer<ffi.Char>, int)>();

  int putenv(
    ffi.Pointer<ffi.Char> _EnvString,
  ) {
    return _putenv1(
      _EnvString,
    );
  }

  late final _putenvPtr =
      _lookup<ffi.NativeFunction<ffi.Int Function(ffi.Pointer<ffi.Char>)>>(
          'putenv');
  late final _putenv1 =
      _putenvPtr.asFunction<int Function(ffi.Pointer<ffi.Char>)>();

  _onexit_t onexit(
    _onexit_t _Func,
  ) {
    return _onexit1(
      _Func,
    );
  }

  late final _onexitPtr =
      _lookup<ffi.NativeFunction<_onexit_t Function(_onexit_t)>>('onexit');
  late final _onexit1 = _onexitPtr.asFunction<_onexit_t Function(_onexit_t)>();

  int duckdb_open(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<duckdb_database> out_database,
  ) {
    return _duckdb_open(
      path,
      out_database,
    );
  }

  late final _duckdb_openPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Pointer<ffi.Char>,
              ffi.Pointer<duckdb_database>)>>('duckdb_open');
  late final _duckdb_open = _duckdb_openPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<duckdb_database>)>();

  int duckdb_open_ext(
    ffi.Pointer<ffi.Char> path,
    ffi.Pointer<duckdb_database> out_database,
    duckdb_config config,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_error,
  ) {
    return _duckdb_open_ext(
      path,
      out_database,
      config,
      out_error,
    );
  }

  late final _duckdb_open_extPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<duckdb_database>,
              duckdb_config,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('duckdb_open_ext');
  late final _duckdb_open_ext = _duckdb_open_extPtr.asFunction<
      int Function(ffi.Pointer<ffi.Char>, ffi.Pointer<duckdb_database>,
          duckdb_config, ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  void duckdb_close(
    ffi.Pointer<duckdb_database> database,
  ) {
    return _duckdb_close(
      database,
    );
  }

  late final _duckdb_closePtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duckdb_database>)>>(
      'duckdb_close');
  late final _duckdb_close = _duckdb_closePtr
      .asFunction<void Function(ffi.Pointer<duckdb_database>)>();

  int duckdb_connect(
    duckdb_database database,
    ffi.Pointer<duckdb_connection> out_connection,
  ) {
    return _duckdb_connect(
      database,
      out_connection,
    );
  }

  late final _duckdb_connectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_database,
              ffi.Pointer<duckdb_connection>)>>('duckdb_connect');
  late final _duckdb_connect = _duckdb_connectPtr.asFunction<
      int Function(duckdb_database, ffi.Pointer<duckdb_connection>)>();

  void duckdb_disconnect(
    ffi.Pointer<duckdb_connection> connection,
  ) {
    return _duckdb_disconnect(
      connection,
    );
  }

  late final _duckdb_disconnectPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<duckdb_connection>)>>('duckdb_disconnect');
  late final _duckdb_disconnect = _duckdb_disconnectPtr
      .asFunction<void Function(ffi.Pointer<duckdb_connection>)>();

  ffi.Pointer<ffi.Char> duckdb_library_version() {
    return _duckdb_library_version();
  }

  late final _duckdb_library_versionPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function()>>(
          'duckdb_library_version');
  late final _duckdb_library_version =
      _duckdb_library_versionPtr.asFunction<ffi.Pointer<ffi.Char> Function()>();

  int duckdb_create_config(
    ffi.Pointer<duckdb_config> out_config,
  ) {
    return _duckdb_create_config(
      out_config,
    );
  }

  late final _duckdb_create_configPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<duckdb_config>)>>(
      'duckdb_create_config');
  late final _duckdb_create_config = _duckdb_create_configPtr
      .asFunction<int Function(ffi.Pointer<duckdb_config>)>();

  int duckdb_config_count() {
    return _duckdb_config_count();
  }

  late final _duckdb_config_countPtr =
      _lookup<ffi.NativeFunction<ffi.Size Function()>>('duckdb_config_count');
  late final _duckdb_config_count =
      _duckdb_config_countPtr.asFunction<int Function()>();

  int duckdb_get_config_flag(
    int index,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_name,
    ffi.Pointer<ffi.Pointer<ffi.Char>> out_description,
  ) {
    return _duckdb_get_config_flag(
      index,
      out_name,
      out_description,
    );
  }

  late final _duckdb_get_config_flagPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(ffi.Size, ffi.Pointer<ffi.Pointer<ffi.Char>>,
              ffi.Pointer<ffi.Pointer<ffi.Char>>)>>('duckdb_get_config_flag');
  late final _duckdb_get_config_flag = _duckdb_get_config_flagPtr.asFunction<
      int Function(int, ffi.Pointer<ffi.Pointer<ffi.Char>>,
          ffi.Pointer<ffi.Pointer<ffi.Char>>)>();

  int duckdb_set_config(
    duckdb_config config,
    ffi.Pointer<ffi.Char> name,
    ffi.Pointer<ffi.Char> option,
  ) {
    return _duckdb_set_config(
      config,
      name,
      option,
    );
  }

  late final _duckdb_set_configPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_config, ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>)>>('duckdb_set_config');
  late final _duckdb_set_config = _duckdb_set_configPtr.asFunction<
      int Function(
          duckdb_config, ffi.Pointer<ffi.Char>, ffi.Pointer<ffi.Char>)>();

  void duckdb_destroy_config(
    ffi.Pointer<duckdb_config> config,
  ) {
    return _duckdb_destroy_config(
      config,
    );
  }

  late final _duckdb_destroy_configPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duckdb_config>)>>(
      'duckdb_destroy_config');
  late final _duckdb_destroy_config = _duckdb_destroy_configPtr
      .asFunction<void Function(ffi.Pointer<duckdb_config>)>();

  int duckdb_query(
    duckdb_connection connection,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<duckdb_result> out_result,
  ) {
    return _duckdb_query(
      connection,
      query,
      out_result,
    );
  }

  late final _duckdb_queryPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_connection, ffi.Pointer<ffi.Char>,
              ffi.Pointer<duckdb_result>)>>('duckdb_query');
  late final _duckdb_query = _duckdb_queryPtr.asFunction<
      int Function(duckdb_connection, ffi.Pointer<ffi.Char>,
          ffi.Pointer<duckdb_result>)>();

  void duckdb_destroy_result(
    ffi.Pointer<duckdb_result> result,
  ) {
    return _duckdb_destroy_result(
      result,
    );
  }

  late final _duckdb_destroy_resultPtr = _lookup<
          ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duckdb_result>)>>(
      'duckdb_destroy_result');
  late final _duckdb_destroy_result = _duckdb_destroy_resultPtr
      .asFunction<void Function(ffi.Pointer<duckdb_result>)>();

  ffi.Pointer<ffi.Char> duckdb_column_name(
    ffi.Pointer<duckdb_result> result,
    int col,
  ) {
    return _duckdb_column_name(
      result,
      col,
    );
  }

  late final _duckdb_column_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duckdb_result>, idx_t)>>('duckdb_column_name');
  late final _duckdb_column_name = _duckdb_column_namePtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duckdb_result>, int)>();

  int duckdb_column_type(
    ffi.Pointer<duckdb_result> result,
    int col,
  ) {
    return _duckdb_column_type(
      result,
      col,
    );
  }

  late final _duckdb_column_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<duckdb_result>, idx_t)>>('duckdb_column_type');
  late final _duckdb_column_type = _duckdb_column_typePtr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int)>();

  duckdb_logical_type duckdb_column_logical_type(
    ffi.Pointer<duckdb_result> result,
    int col,
  ) {
    return _duckdb_column_logical_type(
      result,
      col,
    );
  }

  late final _duckdb_column_logical_typePtr = _lookup<
      ffi.NativeFunction<
          duckdb_logical_type Function(ffi.Pointer<duckdb_result>,
              idx_t)>>('duckdb_column_logical_type');
  late final _duckdb_column_logical_type =
      _duckdb_column_logical_typePtr.asFunction<
          duckdb_logical_type Function(ffi.Pointer<duckdb_result>, int)>();

  int duckdb_column_count(
    ffi.Pointer<duckdb_result> result,
  ) {
    return _duckdb_column_count(
      result,
    );
  }

  late final _duckdb_column_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(ffi.Pointer<duckdb_result>)>>(
          'duckdb_column_count');
  late final _duckdb_column_count = _duckdb_column_countPtr
      .asFunction<int Function(ffi.Pointer<duckdb_result>)>();

  int duckdb_row_count(
    ffi.Pointer<duckdb_result> result,
  ) {
    return _duckdb_row_count(
      result,
    );
  }

  late final _duckdb_row_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(ffi.Pointer<duckdb_result>)>>(
          'duckdb_row_count');
  late final _duckdb_row_count = _duckdb_row_countPtr
      .asFunction<int Function(ffi.Pointer<duckdb_result>)>();

  int duckdb_rows_changed(
    ffi.Pointer<duckdb_result> result,
  ) {
    return _duckdb_rows_changed(
      result,
    );
  }

  late final _duckdb_rows_changedPtr =
      _lookup<ffi.NativeFunction<idx_t Function(ffi.Pointer<duckdb_result>)>>(
          'duckdb_rows_changed');
  late final _duckdb_rows_changed = _duckdb_rows_changedPtr
      .asFunction<int Function(ffi.Pointer<duckdb_result>)>();

  ffi.Pointer<ffi.Void> duckdb_column_data(
    ffi.Pointer<duckdb_result> result,
    int col,
  ) {
    return _duckdb_column_data(
      result,
      col,
    );
  }

  late final _duckdb_column_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              ffi.Pointer<duckdb_result>, idx_t)>>('duckdb_column_data');
  late final _duckdb_column_data = _duckdb_column_dataPtr.asFunction<
      ffi.Pointer<ffi.Void> Function(ffi.Pointer<duckdb_result>, int)>();

  ffi.Pointer<ffi.Bool> duckdb_nullmask_data(
    ffi.Pointer<duckdb_result> result,
    int col,
  ) {
    return _duckdb_nullmask_data(
      result,
      col,
    );
  }

  late final _duckdb_nullmask_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Bool> Function(
              ffi.Pointer<duckdb_result>, idx_t)>>('duckdb_nullmask_data');
  late final _duckdb_nullmask_data = _duckdb_nullmask_dataPtr.asFunction<
      ffi.Pointer<ffi.Bool> Function(ffi.Pointer<duckdb_result>, int)>();

  ffi.Pointer<ffi.Char> duckdb_result_error(
    ffi.Pointer<duckdb_result> result,
  ) {
    return _duckdb_result_error(
      result,
    );
  }

  late final _duckdb_result_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duckdb_result>)>>('duckdb_result_error');
  late final _duckdb_result_error = _duckdb_result_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(ffi.Pointer<duckdb_result>)>();

  duckdb_data_chunk duckdb_result_get_chunk(
    duckdb_result result,
    int chunk_index,
  ) {
    return _duckdb_result_get_chunk(
      result,
      chunk_index,
    );
  }

  late final _duckdb_result_get_chunkPtr = _lookup<
          ffi.NativeFunction<duckdb_data_chunk Function(duckdb_result, idx_t)>>(
      'duckdb_result_get_chunk');
  late final _duckdb_result_get_chunk = _duckdb_result_get_chunkPtr
      .asFunction<duckdb_data_chunk Function(duckdb_result, int)>();

  int duckdb_result_chunk_count(
    duckdb_result result,
  ) {
    return _duckdb_result_chunk_count(
      result,
    );
  }

  late final _duckdb_result_chunk_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_result)>>(
          'duckdb_result_chunk_count');
  late final _duckdb_result_chunk_count =
      _duckdb_result_chunk_countPtr.asFunction<int Function(duckdb_result)>();

  bool duckdb_value_boolean(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_boolean(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_boolean');
  late final _duckdb_value_boolean = _duckdb_value_booleanPtr
      .asFunction<bool Function(ffi.Pointer<duckdb_result>, int, int)>();

  int duckdb_value_int8(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_int8(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_int8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int8 Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_int8');
  late final _duckdb_value_int8 = _duckdb_value_int8Ptr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int, int)>();

  int duckdb_value_int16(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_int16(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_int16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int16 Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_int16');
  late final _duckdb_value_int16 = _duckdb_value_int16Ptr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int, int)>();

  int duckdb_value_int32(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_int32(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_int32');
  late final _duckdb_value_int32 = _duckdb_value_int32Ptr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int, int)>();

  int duckdb_value_int64(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_int64(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int64 Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_int64');
  late final _duckdb_value_int64 = _duckdb_value_int64Ptr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_hugeint duckdb_value_hugeint(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_hugeint(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_hugeintPtr = _lookup<
      ffi.NativeFunction<
          duckdb_hugeint Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_hugeint');
  late final _duckdb_value_hugeint = _duckdb_value_hugeintPtr.asFunction<
      duckdb_hugeint Function(ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_decimal duckdb_value_decimal(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_decimal(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_decimalPtr = _lookup<
      ffi.NativeFunction<
          duckdb_decimal Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_decimal');
  late final _duckdb_value_decimal = _duckdb_value_decimalPtr.asFunction<
      duckdb_decimal Function(ffi.Pointer<duckdb_result>, int, int)>();

  int duckdb_value_uint8(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_uint8(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint8 Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_uint8');
  late final _duckdb_value_uint8 = _duckdb_value_uint8Ptr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int, int)>();

  int duckdb_value_uint16(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_uint16(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_uint16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint16 Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_uint16');
  late final _duckdb_value_uint16 = _duckdb_value_uint16Ptr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int, int)>();

  int duckdb_value_uint32(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_uint32(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint32 Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_uint32');
  late final _duckdb_value_uint32 = _duckdb_value_uint32Ptr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int, int)>();

  int duckdb_value_uint64(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_uint64(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Uint64 Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_uint64');
  late final _duckdb_value_uint64 = _duckdb_value_uint64Ptr
      .asFunction<int Function(ffi.Pointer<duckdb_result>, int, int)>();

  double duckdb_value_float(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_float(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Float Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_float');
  late final _duckdb_value_float = _duckdb_value_floatPtr
      .asFunction<double Function(ffi.Pointer<duckdb_result>, int, int)>();

  double duckdb_value_double(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_double(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Double Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_double');
  late final _duckdb_value_double = _duckdb_value_doublePtr
      .asFunction<double Function(ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_date duckdb_value_date(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_date(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_datePtr = _lookup<
      ffi.NativeFunction<
          duckdb_date Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_date');
  late final _duckdb_value_date = _duckdb_value_datePtr
      .asFunction<duckdb_date Function(ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_time duckdb_value_time(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_time(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_timePtr = _lookup<
      ffi.NativeFunction<
          duckdb_time Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_time');
  late final _duckdb_value_time = _duckdb_value_timePtr
      .asFunction<duckdb_time Function(ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_timestamp duckdb_value_timestamp(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_timestamp(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_timestampPtr = _lookup<
      ffi.NativeFunction<
          duckdb_timestamp Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_timestamp');
  late final _duckdb_value_timestamp = _duckdb_value_timestampPtr.asFunction<
      duckdb_timestamp Function(ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_interval duckdb_value_interval(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_interval(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_intervalPtr = _lookup<
      ffi.NativeFunction<
          duckdb_interval Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_interval');
  late final _duckdb_value_interval = _duckdb_value_intervalPtr.asFunction<
      duckdb_interval Function(ffi.Pointer<duckdb_result>, int, int)>();

  ffi.Pointer<ffi.Char> duckdb_value_varchar(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_varchar(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_varcharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_varchar');
  late final _duckdb_value_varchar = _duckdb_value_varcharPtr.asFunction<
      ffi.Pointer<ffi.Char> Function(ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_string duckdb_value_string(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_string(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_stringPtr = _lookup<
      ffi.NativeFunction<
          duckdb_string Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_string');
  late final _duckdb_value_string = _duckdb_value_stringPtr.asFunction<
      duckdb_string Function(ffi.Pointer<duckdb_result>, int, int)>();

  ffi.Pointer<ffi.Char> duckdb_value_varchar_internal(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_varchar_internal(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_varchar_internalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_varchar_internal');
  late final _duckdb_value_varchar_internal =
      _duckdb_value_varchar_internalPtr.asFunction<
          ffi.Pointer<ffi.Char> Function(
              ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_string duckdb_value_string_internal(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_string_internal(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_string_internalPtr = _lookup<
      ffi.NativeFunction<
          duckdb_string Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_string_internal');
  late final _duckdb_value_string_internal =
      _duckdb_value_string_internalPtr.asFunction<
          duckdb_string Function(ffi.Pointer<duckdb_result>, int, int)>();

  duckdb_blob duckdb_value_blob(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_blob(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_blobPtr = _lookup<
      ffi.NativeFunction<
          duckdb_blob Function(
              ffi.Pointer<duckdb_result>, idx_t, idx_t)>>('duckdb_value_blob');
  late final _duckdb_value_blob = _duckdb_value_blobPtr
      .asFunction<duckdb_blob Function(ffi.Pointer<duckdb_result>, int, int)>();

  bool duckdb_value_is_null(
    ffi.Pointer<duckdb_result> result,
    int col,
    int row,
  ) {
    return _duckdb_value_is_null(
      result,
      col,
      row,
    );
  }

  late final _duckdb_value_is_nullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(ffi.Pointer<duckdb_result>, idx_t,
              idx_t)>>('duckdb_value_is_null');
  late final _duckdb_value_is_null = _duckdb_value_is_nullPtr
      .asFunction<bool Function(ffi.Pointer<duckdb_result>, int, int)>();

  ffi.Pointer<ffi.Void> duckdb_malloc(
    int size,
  ) {
    return _duckdb_malloc(
      size,
    );
  }

  late final _duckdb_mallocPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(ffi.Size)>>(
          'duckdb_malloc');
  late final _duckdb_malloc =
      _duckdb_mallocPtr.asFunction<ffi.Pointer<ffi.Void> Function(int)>();

  void duckdb_free(
    ffi.Pointer<ffi.Void> ptr,
  ) {
    return _duckdb_free(
      ptr,
    );
  }

  late final _duckdb_freePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>(
          'duckdb_free');
  late final _duckdb_free =
      _duckdb_freePtr.asFunction<void Function(ffi.Pointer<ffi.Void>)>();

  int duckdb_vector_size() {
    return _duckdb_vector_size();
  }

  late final _duckdb_vector_sizePtr =
      _lookup<ffi.NativeFunction<idx_t Function()>>('duckdb_vector_size');
  late final _duckdb_vector_size =
      _duckdb_vector_sizePtr.asFunction<int Function()>();

  duckdb_date_struct duckdb_from_date(
    duckdb_date date,
  ) {
    return _duckdb_from_date(
      date,
    );
  }

  late final _duckdb_from_datePtr =
      _lookup<ffi.NativeFunction<duckdb_date_struct Function(duckdb_date)>>(
          'duckdb_from_date');
  late final _duckdb_from_date = _duckdb_from_datePtr
      .asFunction<duckdb_date_struct Function(duckdb_date)>();

  duckdb_date duckdb_to_date(
    duckdb_date_struct date,
  ) {
    return _duckdb_to_date(
      date,
    );
  }

  late final _duckdb_to_datePtr =
      _lookup<ffi.NativeFunction<duckdb_date Function(duckdb_date_struct)>>(
          'duckdb_to_date');
  late final _duckdb_to_date =
      _duckdb_to_datePtr.asFunction<duckdb_date Function(duckdb_date_struct)>();

  duckdb_time_struct duckdb_from_time(
    duckdb_time time,
  ) {
    return _duckdb_from_time(
      time,
    );
  }

  late final _duckdb_from_timePtr =
      _lookup<ffi.NativeFunction<duckdb_time_struct Function(duckdb_time)>>(
          'duckdb_from_time');
  late final _duckdb_from_time = _duckdb_from_timePtr
      .asFunction<duckdb_time_struct Function(duckdb_time)>();

  duckdb_time duckdb_to_time(
    duckdb_time_struct time,
  ) {
    return _duckdb_to_time(
      time,
    );
  }

  late final _duckdb_to_timePtr =
      _lookup<ffi.NativeFunction<duckdb_time Function(duckdb_time_struct)>>(
          'duckdb_to_time');
  late final _duckdb_to_time =
      _duckdb_to_timePtr.asFunction<duckdb_time Function(duckdb_time_struct)>();

  duckdb_timestamp_struct duckdb_from_timestamp(
    duckdb_timestamp ts,
  ) {
    return _duckdb_from_timestamp(
      ts,
    );
  }

  late final _duckdb_from_timestampPtr = _lookup<
      ffi.NativeFunction<
          duckdb_timestamp_struct Function(
              duckdb_timestamp)>>('duckdb_from_timestamp');
  late final _duckdb_from_timestamp = _duckdb_from_timestampPtr
      .asFunction<duckdb_timestamp_struct Function(duckdb_timestamp)>();

  duckdb_timestamp duckdb_to_timestamp(
    duckdb_timestamp_struct ts,
  ) {
    return _duckdb_to_timestamp(
      ts,
    );
  }

  late final _duckdb_to_timestampPtr = _lookup<
      ffi.NativeFunction<
          duckdb_timestamp Function(
              duckdb_timestamp_struct)>>('duckdb_to_timestamp');
  late final _duckdb_to_timestamp = _duckdb_to_timestampPtr
      .asFunction<duckdb_timestamp Function(duckdb_timestamp_struct)>();

  double duckdb_hugeint_to_double(
    duckdb_hugeint val,
  ) {
    return _duckdb_hugeint_to_double(
      val,
    );
  }

  late final _duckdb_hugeint_to_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(duckdb_hugeint)>>(
          'duckdb_hugeint_to_double');
  late final _duckdb_hugeint_to_double = _duckdb_hugeint_to_doublePtr
      .asFunction<double Function(duckdb_hugeint)>();

  duckdb_hugeint duckdb_double_to_hugeint(
    double val,
  ) {
    return _duckdb_double_to_hugeint(
      val,
    );
  }

  late final _duckdb_double_to_hugeintPtr =
      _lookup<ffi.NativeFunction<duckdb_hugeint Function(ffi.Double)>>(
          'duckdb_double_to_hugeint');
  late final _duckdb_double_to_hugeint = _duckdb_double_to_hugeintPtr
      .asFunction<duckdb_hugeint Function(double)>();

  duckdb_decimal duckdb_double_to_decimal(
    double val,
    int width,
    int scale,
  ) {
    return _duckdb_double_to_decimal(
      val,
      width,
      scale,
    );
  }

  late final _duckdb_double_to_decimalPtr = _lookup<
      ffi.NativeFunction<
          duckdb_decimal Function(
              ffi.Double, ffi.Uint8, ffi.Uint8)>>('duckdb_double_to_decimal');
  late final _duckdb_double_to_decimal = _duckdb_double_to_decimalPtr
      .asFunction<duckdb_decimal Function(double, int, int)>();

  double duckdb_decimal_to_double(
    duckdb_decimal val,
  ) {
    return _duckdb_decimal_to_double(
      val,
    );
  }

  late final _duckdb_decimal_to_doublePtr =
      _lookup<ffi.NativeFunction<ffi.Double Function(duckdb_decimal)>>(
          'duckdb_decimal_to_double');
  late final _duckdb_decimal_to_double = _duckdb_decimal_to_doublePtr
      .asFunction<double Function(duckdb_decimal)>();

  int duckdb_prepare(
    duckdb_connection connection,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<duckdb_prepared_statement> out_prepared_statement,
  ) {
    return _duckdb_prepare(
      connection,
      query,
      out_prepared_statement,
    );
  }

  late final _duckdb_preparePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_connection, ffi.Pointer<ffi.Char>,
              ffi.Pointer<duckdb_prepared_statement>)>>('duckdb_prepare');
  late final _duckdb_prepare = _duckdb_preparePtr.asFunction<
      int Function(duckdb_connection, ffi.Pointer<ffi.Char>,
          ffi.Pointer<duckdb_prepared_statement>)>();

  void duckdb_destroy_prepare(
    ffi.Pointer<duckdb_prepared_statement> prepared_statement,
  ) {
    return _duckdb_destroy_prepare(
      prepared_statement,
    );
  }

  late final _duckdb_destroy_preparePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<duckdb_prepared_statement>)>>(
      'duckdb_destroy_prepare');
  late final _duckdb_destroy_prepare = _duckdb_destroy_preparePtr
      .asFunction<void Function(ffi.Pointer<duckdb_prepared_statement>)>();

  ffi.Pointer<ffi.Char> duckdb_prepare_error(
    duckdb_prepared_statement prepared_statement,
  ) {
    return _duckdb_prepare_error(
      prepared_statement,
    );
  }

  late final _duckdb_prepare_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              duckdb_prepared_statement)>>('duckdb_prepare_error');
  late final _duckdb_prepare_error = _duckdb_prepare_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(duckdb_prepared_statement)>();

  int duckdb_nparams(
    duckdb_prepared_statement prepared_statement,
  ) {
    return _duckdb_nparams(
      prepared_statement,
    );
  }

  late final _duckdb_nparamsPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_prepared_statement)>>(
          'duckdb_nparams');
  late final _duckdb_nparams =
      _duckdb_nparamsPtr.asFunction<int Function(duckdb_prepared_statement)>();

  int duckdb_param_type(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
  ) {
    return _duckdb_param_type(
      prepared_statement,
      param_idx,
    );
  }

  late final _duckdb_param_typePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              duckdb_prepared_statement, idx_t)>>('duckdb_param_type');
  late final _duckdb_param_type = _duckdb_param_typePtr
      .asFunction<int Function(duckdb_prepared_statement, int)>();

  int duckdb_clear_bindings(
    duckdb_prepared_statement prepared_statement,
  ) {
    return _duckdb_clear_bindings(
      prepared_statement,
    );
  }

  late final _duckdb_clear_bindingsPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_prepared_statement)>>(
      'duckdb_clear_bindings');
  late final _duckdb_clear_bindings = _duckdb_clear_bindingsPtr
      .asFunction<int Function(duckdb_prepared_statement)>();

  int duckdb_bind_boolean(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    bool val,
  ) {
    return _duckdb_bind_boolean(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_booleanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Bool)>>('duckdb_bind_boolean');
  late final _duckdb_bind_boolean = _duckdb_bind_booleanPtr
      .asFunction<int Function(duckdb_prepared_statement, int, bool)>();

  int duckdb_bind_int8(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    int val,
  ) {
    return _duckdb_bind_int8(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_int8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              duckdb_prepared_statement, idx_t, ffi.Int8)>>('duckdb_bind_int8');
  late final _duckdb_bind_int8 = _duckdb_bind_int8Ptr
      .asFunction<int Function(duckdb_prepared_statement, int, int)>();

  int duckdb_bind_int16(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    int val,
  ) {
    return _duckdb_bind_int16(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_int16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Int16)>>('duckdb_bind_int16');
  late final _duckdb_bind_int16 = _duckdb_bind_int16Ptr
      .asFunction<int Function(duckdb_prepared_statement, int, int)>();

  int duckdb_bind_int32(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    int val,
  ) {
    return _duckdb_bind_int32(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_int32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Int32)>>('duckdb_bind_int32');
  late final _duckdb_bind_int32 = _duckdb_bind_int32Ptr
      .asFunction<int Function(duckdb_prepared_statement, int, int)>();

  int duckdb_bind_int64(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    int val,
  ) {
    return _duckdb_bind_int64(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_int64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Int64)>>('duckdb_bind_int64');
  late final _duckdb_bind_int64 = _duckdb_bind_int64Ptr
      .asFunction<int Function(duckdb_prepared_statement, int, int)>();

  int duckdb_bind_hugeint(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    duckdb_hugeint val,
  ) {
    return _duckdb_bind_hugeint(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_hugeintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              duckdb_hugeint)>>('duckdb_bind_hugeint');
  late final _duckdb_bind_hugeint = _duckdb_bind_hugeintPtr.asFunction<
      int Function(duckdb_prepared_statement, int, duckdb_hugeint)>();

  int duckdb_bind_decimal(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    duckdb_decimal val,
  ) {
    return _duckdb_bind_decimal(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_decimalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              duckdb_decimal)>>('duckdb_bind_decimal');
  late final _duckdb_bind_decimal = _duckdb_bind_decimalPtr.asFunction<
      int Function(duckdb_prepared_statement, int, duckdb_decimal)>();

  int duckdb_bind_uint8(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    int val,
  ) {
    return _duckdb_bind_uint8(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_uint8Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Uint8)>>('duckdb_bind_uint8');
  late final _duckdb_bind_uint8 = _duckdb_bind_uint8Ptr
      .asFunction<int Function(duckdb_prepared_statement, int, int)>();

  int duckdb_bind_uint16(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    int val,
  ) {
    return _duckdb_bind_uint16(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_uint16Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Uint16)>>('duckdb_bind_uint16');
  late final _duckdb_bind_uint16 = _duckdb_bind_uint16Ptr
      .asFunction<int Function(duckdb_prepared_statement, int, int)>();

  int duckdb_bind_uint32(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    int val,
  ) {
    return _duckdb_bind_uint32(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_uint32Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Uint32)>>('duckdb_bind_uint32');
  late final _duckdb_bind_uint32 = _duckdb_bind_uint32Ptr
      .asFunction<int Function(duckdb_prepared_statement, int, int)>();

  int duckdb_bind_uint64(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    int val,
  ) {
    return _duckdb_bind_uint64(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_uint64Ptr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Uint64)>>('duckdb_bind_uint64');
  late final _duckdb_bind_uint64 = _duckdb_bind_uint64Ptr
      .asFunction<int Function(duckdb_prepared_statement, int, int)>();

  int duckdb_bind_float(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    double val,
  ) {
    return _duckdb_bind_float(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_floatPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Float)>>('duckdb_bind_float');
  late final _duckdb_bind_float = _duckdb_bind_floatPtr
      .asFunction<int Function(duckdb_prepared_statement, int, double)>();

  int duckdb_bind_double(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    double val,
  ) {
    return _duckdb_bind_double(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_doublePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Double)>>('duckdb_bind_double');
  late final _duckdb_bind_double = _duckdb_bind_doublePtr
      .asFunction<int Function(duckdb_prepared_statement, int, double)>();

  int duckdb_bind_date(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    duckdb_date val,
  ) {
    return _duckdb_bind_date(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_datePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              duckdb_date)>>('duckdb_bind_date');
  late final _duckdb_bind_date = _duckdb_bind_datePtr
      .asFunction<int Function(duckdb_prepared_statement, int, duckdb_date)>();

  int duckdb_bind_time(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    duckdb_time val,
  ) {
    return _duckdb_bind_time(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_timePtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              duckdb_time)>>('duckdb_bind_time');
  late final _duckdb_bind_time = _duckdb_bind_timePtr
      .asFunction<int Function(duckdb_prepared_statement, int, duckdb_time)>();

  int duckdb_bind_timestamp(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    duckdb_timestamp val,
  ) {
    return _duckdb_bind_timestamp(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_timestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              duckdb_timestamp)>>('duckdb_bind_timestamp');
  late final _duckdb_bind_timestamp = _duckdb_bind_timestampPtr.asFunction<
      int Function(duckdb_prepared_statement, int, duckdb_timestamp)>();

  int duckdb_bind_interval(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    duckdb_interval val,
  ) {
    return _duckdb_bind_interval(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              duckdb_interval)>>('duckdb_bind_interval');
  late final _duckdb_bind_interval = _duckdb_bind_intervalPtr.asFunction<
      int Function(duckdb_prepared_statement, int, duckdb_interval)>();

  int duckdb_bind_varchar(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _duckdb_bind_varchar(
      prepared_statement,
      param_idx,
      val,
    );
  }

  late final _duckdb_bind_varcharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Pointer<ffi.Char>)>>('duckdb_bind_varchar');
  late final _duckdb_bind_varchar = _duckdb_bind_varcharPtr.asFunction<
      int Function(duckdb_prepared_statement, int, ffi.Pointer<ffi.Char>)>();

  int duckdb_bind_varchar_length(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    ffi.Pointer<ffi.Char> val,
    int length,
  ) {
    return _duckdb_bind_varchar_length(
      prepared_statement,
      param_idx,
      val,
      length,
    );
  }

  late final _duckdb_bind_varchar_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Pointer<ffi.Char>, idx_t)>>('duckdb_bind_varchar_length');
  late final _duckdb_bind_varchar_length =
      _duckdb_bind_varchar_lengthPtr.asFunction<
          int Function(
              duckdb_prepared_statement, int, ffi.Pointer<ffi.Char>, int)>();

  int duckdb_bind_blob(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
    ffi.Pointer<ffi.Void> data,
    int length,
  ) {
    return _duckdb_bind_blob(
      prepared_statement,
      param_idx,
      data,
      length,
    );
  }

  late final _duckdb_bind_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement, idx_t,
              ffi.Pointer<ffi.Void>, idx_t)>>('duckdb_bind_blob');
  late final _duckdb_bind_blob = _duckdb_bind_blobPtr.asFunction<
      int Function(
          duckdb_prepared_statement, int, ffi.Pointer<ffi.Void>, int)>();

  int duckdb_bind_null(
    duckdb_prepared_statement prepared_statement,
    int param_idx,
  ) {
    return _duckdb_bind_null(
      prepared_statement,
      param_idx,
    );
  }

  late final _duckdb_bind_nullPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              duckdb_prepared_statement, idx_t)>>('duckdb_bind_null');
  late final _duckdb_bind_null = _duckdb_bind_nullPtr
      .asFunction<int Function(duckdb_prepared_statement, int)>();

  int duckdb_execute_prepared(
    duckdb_prepared_statement prepared_statement,
    ffi.Pointer<duckdb_result> out_result,
  ) {
    return _duckdb_execute_prepared(
      prepared_statement,
      out_result,
    );
  }

  late final _duckdb_execute_preparedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement,
              ffi.Pointer<duckdb_result>)>>('duckdb_execute_prepared');
  late final _duckdb_execute_prepared = _duckdb_execute_preparedPtr.asFunction<
      int Function(duckdb_prepared_statement, ffi.Pointer<duckdb_result>)>();

  int duckdb_execute_prepared_arrow(
    duckdb_prepared_statement prepared_statement,
    ffi.Pointer<duckdb_arrow> out_result,
  ) {
    return _duckdb_execute_prepared_arrow(
      prepared_statement,
      out_result,
    );
  }

  late final _duckdb_execute_prepared_arrowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement,
              ffi.Pointer<duckdb_arrow>)>>('duckdb_execute_prepared_arrow');
  late final _duckdb_execute_prepared_arrow =
      _duckdb_execute_prepared_arrowPtr.asFunction<
          int Function(duckdb_prepared_statement, ffi.Pointer<duckdb_arrow>)>();

  int duckdb_pending_prepared(
    duckdb_prepared_statement prepared_statement,
    ffi.Pointer<duckdb_pending_result> out_result,
  ) {
    return _duckdb_pending_prepared(
      prepared_statement,
      out_result,
    );
  }

  late final _duckdb_pending_preparedPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_prepared_statement,
              ffi.Pointer<duckdb_pending_result>)>>('duckdb_pending_prepared');
  late final _duckdb_pending_prepared = _duckdb_pending_preparedPtr.asFunction<
      int Function(
          duckdb_prepared_statement, ffi.Pointer<duckdb_pending_result>)>();

  void duckdb_destroy_pending(
    ffi.Pointer<duckdb_pending_result> pending_result,
  ) {
    return _duckdb_destroy_pending(
      pending_result,
    );
  }

  late final _duckdb_destroy_pendingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<duckdb_pending_result>)>>('duckdb_destroy_pending');
  late final _duckdb_destroy_pending = _duckdb_destroy_pendingPtr
      .asFunction<void Function(ffi.Pointer<duckdb_pending_result>)>();

  ffi.Pointer<ffi.Char> duckdb_pending_error(
    duckdb_pending_result pending_result,
  ) {
    return _duckdb_pending_error(
      pending_result,
    );
  }

  late final _duckdb_pending_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              duckdb_pending_result)>>('duckdb_pending_error');
  late final _duckdb_pending_error = _duckdb_pending_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(duckdb_pending_result)>();

  int duckdb_pending_execute_task(
    duckdb_pending_result pending_result,
  ) {
    return _duckdb_pending_execute_task(
      pending_result,
    );
  }

  late final _duckdb_pending_execute_taskPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_pending_result)>>(
          'duckdb_pending_execute_task');
  late final _duckdb_pending_execute_task = _duckdb_pending_execute_taskPtr
      .asFunction<int Function(duckdb_pending_result)>();

  int duckdb_execute_pending(
    duckdb_pending_result pending_result,
    ffi.Pointer<duckdb_result> out_result,
  ) {
    return _duckdb_execute_pending(
      pending_result,
      out_result,
    );
  }

  late final _duckdb_execute_pendingPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_pending_result,
              ffi.Pointer<duckdb_result>)>>('duckdb_execute_pending');
  late final _duckdb_execute_pending = _duckdb_execute_pendingPtr.asFunction<
      int Function(duckdb_pending_result, ffi.Pointer<duckdb_result>)>();

  void duckdb_destroy_value(
    ffi.Pointer<duckdb_value> value,
  ) {
    return _duckdb_destroy_value(
      value,
    );
  }

  late final _duckdb_destroy_valuePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duckdb_value>)>>(
          'duckdb_destroy_value');
  late final _duckdb_destroy_value = _duckdb_destroy_valuePtr
      .asFunction<void Function(ffi.Pointer<duckdb_value>)>();

  duckdb_value duckdb_create_varchar(
    ffi.Pointer<ffi.Char> text,
  ) {
    return _duckdb_create_varchar(
      text,
    );
  }

  late final _duckdb_create_varcharPtr =
      _lookup<ffi.NativeFunction<duckdb_value Function(ffi.Pointer<ffi.Char>)>>(
          'duckdb_create_varchar');
  late final _duckdb_create_varchar = _duckdb_create_varcharPtr
      .asFunction<duckdb_value Function(ffi.Pointer<ffi.Char>)>();

  duckdb_value duckdb_create_varchar_length(
    ffi.Pointer<ffi.Char> text,
    int length,
  ) {
    return _duckdb_create_varchar_length(
      text,
      length,
    );
  }

  late final _duckdb_create_varchar_lengthPtr = _lookup<
      ffi.NativeFunction<
          duckdb_value Function(
              ffi.Pointer<ffi.Char>, idx_t)>>('duckdb_create_varchar_length');
  late final _duckdb_create_varchar_length = _duckdb_create_varchar_lengthPtr
      .asFunction<duckdb_value Function(ffi.Pointer<ffi.Char>, int)>();

  duckdb_value duckdb_create_int64(
    int val,
  ) {
    return _duckdb_create_int64(
      val,
    );
  }

  late final _duckdb_create_int64Ptr =
      _lookup<ffi.NativeFunction<duckdb_value Function(ffi.Int64)>>(
          'duckdb_create_int64');
  late final _duckdb_create_int64 =
      _duckdb_create_int64Ptr.asFunction<duckdb_value Function(int)>();

  ffi.Pointer<ffi.Char> duckdb_get_varchar(
    duckdb_value value,
  ) {
    return _duckdb_get_varchar(
      value,
    );
  }

  late final _duckdb_get_varcharPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(duckdb_value)>>(
          'duckdb_get_varchar');
  late final _duckdb_get_varchar = _duckdb_get_varcharPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(duckdb_value)>();

  int duckdb_get_int64(
    duckdb_value value,
  ) {
    return _duckdb_get_int64(
      value,
    );
  }

  late final _duckdb_get_int64Ptr =
      _lookup<ffi.NativeFunction<ffi.Int64 Function(duckdb_value)>>(
          'duckdb_get_int64');
  late final _duckdb_get_int64 =
      _duckdb_get_int64Ptr.asFunction<int Function(duckdb_value)>();

  duckdb_logical_type duckdb_create_logical_type(
    int type,
  ) {
    return _duckdb_create_logical_type(
      type,
    );
  }

  late final _duckdb_create_logical_typePtr =
      _lookup<ffi.NativeFunction<duckdb_logical_type Function(ffi.Int32)>>(
          'duckdb_create_logical_type');
  late final _duckdb_create_logical_type = _duckdb_create_logical_typePtr
      .asFunction<duckdb_logical_type Function(int)>();

  duckdb_logical_type duckdb_create_list_type(
    duckdb_logical_type type,
  ) {
    return _duckdb_create_list_type(
      type,
    );
  }

  late final _duckdb_create_list_typePtr = _lookup<
      ffi.NativeFunction<
          duckdb_logical_type Function(
              duckdb_logical_type)>>('duckdb_create_list_type');
  late final _duckdb_create_list_type = _duckdb_create_list_typePtr
      .asFunction<duckdb_logical_type Function(duckdb_logical_type)>();

  duckdb_logical_type duckdb_create_map_type(
    duckdb_logical_type key_type,
    duckdb_logical_type value_type,
  ) {
    return _duckdb_create_map_type(
      key_type,
      value_type,
    );
  }

  late final _duckdb_create_map_typePtr = _lookup<
      ffi.NativeFunction<
          duckdb_logical_type Function(duckdb_logical_type,
              duckdb_logical_type)>>('duckdb_create_map_type');
  late final _duckdb_create_map_type = _duckdb_create_map_typePtr.asFunction<
      duckdb_logical_type Function(duckdb_logical_type, duckdb_logical_type)>();

  duckdb_logical_type duckdb_create_decimal_type(
    int width,
    int scale,
  ) {
    return _duckdb_create_decimal_type(
      width,
      scale,
    );
  }

  late final _duckdb_create_decimal_typePtr = _lookup<
      ffi.NativeFunction<
          duckdb_logical_type Function(
              ffi.Uint8, ffi.Uint8)>>('duckdb_create_decimal_type');
  late final _duckdb_create_decimal_type = _duckdb_create_decimal_typePtr
      .asFunction<duckdb_logical_type Function(int, int)>();

  int duckdb_get_type_id(
    duckdb_logical_type type,
  ) {
    return _duckdb_get_type_id(
      type,
    );
  }

  late final _duckdb_get_type_idPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_logical_type)>>(
          'duckdb_get_type_id');
  late final _duckdb_get_type_id =
      _duckdb_get_type_idPtr.asFunction<int Function(duckdb_logical_type)>();

  int duckdb_decimal_width(
    duckdb_logical_type type,
  ) {
    return _duckdb_decimal_width(
      type,
    );
  }

  late final _duckdb_decimal_widthPtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(duckdb_logical_type)>>(
          'duckdb_decimal_width');
  late final _duckdb_decimal_width =
      _duckdb_decimal_widthPtr.asFunction<int Function(duckdb_logical_type)>();

  int duckdb_decimal_scale(
    duckdb_logical_type type,
  ) {
    return _duckdb_decimal_scale(
      type,
    );
  }

  late final _duckdb_decimal_scalePtr =
      _lookup<ffi.NativeFunction<ffi.Uint8 Function(duckdb_logical_type)>>(
          'duckdb_decimal_scale');
  late final _duckdb_decimal_scale =
      _duckdb_decimal_scalePtr.asFunction<int Function(duckdb_logical_type)>();

  int duckdb_decimal_internal_type(
    duckdb_logical_type type,
  ) {
    return _duckdb_decimal_internal_type(
      type,
    );
  }

  late final _duckdb_decimal_internal_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_logical_type)>>(
          'duckdb_decimal_internal_type');
  late final _duckdb_decimal_internal_type = _duckdb_decimal_internal_typePtr
      .asFunction<int Function(duckdb_logical_type)>();

  int duckdb_enum_internal_type(
    duckdb_logical_type type,
  ) {
    return _duckdb_enum_internal_type(
      type,
    );
  }

  late final _duckdb_enum_internal_typePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_logical_type)>>(
          'duckdb_enum_internal_type');
  late final _duckdb_enum_internal_type = _duckdb_enum_internal_typePtr
      .asFunction<int Function(duckdb_logical_type)>();

  int duckdb_enum_dictionary_size(
    duckdb_logical_type type,
  ) {
    return _duckdb_enum_dictionary_size(
      type,
    );
  }

  late final _duckdb_enum_dictionary_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Uint32 Function(duckdb_logical_type)>>(
          'duckdb_enum_dictionary_size');
  late final _duckdb_enum_dictionary_size = _duckdb_enum_dictionary_sizePtr
      .asFunction<int Function(duckdb_logical_type)>();

  ffi.Pointer<ffi.Char> duckdb_enum_dictionary_value(
    duckdb_logical_type type,
    int index,
  ) {
    return _duckdb_enum_dictionary_value(
      type,
      index,
    );
  }

  late final _duckdb_enum_dictionary_valuePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              duckdb_logical_type, idx_t)>>('duckdb_enum_dictionary_value');
  late final _duckdb_enum_dictionary_value = _duckdb_enum_dictionary_valuePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(duckdb_logical_type, int)>();

  duckdb_logical_type duckdb_list_type_child_type(
    duckdb_logical_type type,
  ) {
    return _duckdb_list_type_child_type(
      type,
    );
  }

  late final _duckdb_list_type_child_typePtr = _lookup<
      ffi.NativeFunction<
          duckdb_logical_type Function(
              duckdb_logical_type)>>('duckdb_list_type_child_type');
  late final _duckdb_list_type_child_type = _duckdb_list_type_child_typePtr
      .asFunction<duckdb_logical_type Function(duckdb_logical_type)>();

  duckdb_logical_type duckdb_map_type_key_type(
    duckdb_logical_type type,
  ) {
    return _duckdb_map_type_key_type(
      type,
    );
  }

  late final _duckdb_map_type_key_typePtr = _lookup<
      ffi.NativeFunction<
          duckdb_logical_type Function(
              duckdb_logical_type)>>('duckdb_map_type_key_type');
  late final _duckdb_map_type_key_type = _duckdb_map_type_key_typePtr
      .asFunction<duckdb_logical_type Function(duckdb_logical_type)>();

  duckdb_logical_type duckdb_map_type_value_type(
    duckdb_logical_type type,
  ) {
    return _duckdb_map_type_value_type(
      type,
    );
  }

  late final _duckdb_map_type_value_typePtr = _lookup<
      ffi.NativeFunction<
          duckdb_logical_type Function(
              duckdb_logical_type)>>('duckdb_map_type_value_type');
  late final _duckdb_map_type_value_type = _duckdb_map_type_value_typePtr
      .asFunction<duckdb_logical_type Function(duckdb_logical_type)>();

  int duckdb_struct_type_child_count(
    duckdb_logical_type type,
  ) {
    return _duckdb_struct_type_child_count(
      type,
    );
  }

  late final _duckdb_struct_type_child_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_logical_type)>>(
          'duckdb_struct_type_child_count');
  late final _duckdb_struct_type_child_count =
      _duckdb_struct_type_child_countPtr
          .asFunction<int Function(duckdb_logical_type)>();

  ffi.Pointer<ffi.Char> duckdb_struct_type_child_name(
    duckdb_logical_type type,
    int index,
  ) {
    return _duckdb_struct_type_child_name(
      type,
      index,
    );
  }

  late final _duckdb_struct_type_child_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Char> Function(
              duckdb_logical_type, idx_t)>>('duckdb_struct_type_child_name');
  late final _duckdb_struct_type_child_name = _duckdb_struct_type_child_namePtr
      .asFunction<ffi.Pointer<ffi.Char> Function(duckdb_logical_type, int)>();

  duckdb_logical_type duckdb_struct_type_child_type(
    duckdb_logical_type type,
    int index,
  ) {
    return _duckdb_struct_type_child_type(
      type,
      index,
    );
  }

  late final _duckdb_struct_type_child_typePtr = _lookup<
      ffi.NativeFunction<
          duckdb_logical_type Function(
              duckdb_logical_type, idx_t)>>('duckdb_struct_type_child_type');
  late final _duckdb_struct_type_child_type = _duckdb_struct_type_child_typePtr
      .asFunction<duckdb_logical_type Function(duckdb_logical_type, int)>();

  void duckdb_destroy_logical_type(
    ffi.Pointer<duckdb_logical_type> type,
  ) {
    return _duckdb_destroy_logical_type(
      type,
    );
  }

  late final _duckdb_destroy_logical_typePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<duckdb_logical_type>)>>(
      'duckdb_destroy_logical_type');
  late final _duckdb_destroy_logical_type = _duckdb_destroy_logical_typePtr
      .asFunction<void Function(ffi.Pointer<duckdb_logical_type>)>();

  duckdb_data_chunk duckdb_create_data_chunk(
    ffi.Pointer<duckdb_logical_type> types,
    int column_count,
  ) {
    return _duckdb_create_data_chunk(
      types,
      column_count,
    );
  }

  late final _duckdb_create_data_chunkPtr = _lookup<
      ffi.NativeFunction<
          duckdb_data_chunk Function(ffi.Pointer<duckdb_logical_type>,
              idx_t)>>('duckdb_create_data_chunk');
  late final _duckdb_create_data_chunk =
      _duckdb_create_data_chunkPtr.asFunction<
          duckdb_data_chunk Function(ffi.Pointer<duckdb_logical_type>, int)>();

  void duckdb_destroy_data_chunk(
    ffi.Pointer<duckdb_data_chunk> chunk,
  ) {
    return _duckdb_destroy_data_chunk(
      chunk,
    );
  }

  late final _duckdb_destroy_data_chunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              ffi.Pointer<duckdb_data_chunk>)>>('duckdb_destroy_data_chunk');
  late final _duckdb_destroy_data_chunk = _duckdb_destroy_data_chunkPtr
      .asFunction<void Function(ffi.Pointer<duckdb_data_chunk>)>();

  void duckdb_data_chunk_reset(
    duckdb_data_chunk chunk,
  ) {
    return _duckdb_data_chunk_reset(
      chunk,
    );
  }

  late final _duckdb_data_chunk_resetPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(duckdb_data_chunk)>>(
          'duckdb_data_chunk_reset');
  late final _duckdb_data_chunk_reset = _duckdb_data_chunk_resetPtr
      .asFunction<void Function(duckdb_data_chunk)>();

  int duckdb_data_chunk_get_column_count(
    duckdb_data_chunk chunk,
  ) {
    return _duckdb_data_chunk_get_column_count(
      chunk,
    );
  }

  late final _duckdb_data_chunk_get_column_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_data_chunk)>>(
          'duckdb_data_chunk_get_column_count');
  late final _duckdb_data_chunk_get_column_count =
      _duckdb_data_chunk_get_column_countPtr
          .asFunction<int Function(duckdb_data_chunk)>();

  duckdb_vector duckdb_data_chunk_get_vector(
    duckdb_data_chunk chunk,
    int col_idx,
  ) {
    return _duckdb_data_chunk_get_vector(
      chunk,
      col_idx,
    );
  }

  late final _duckdb_data_chunk_get_vectorPtr = _lookup<
          ffi.NativeFunction<duckdb_vector Function(duckdb_data_chunk, idx_t)>>(
      'duckdb_data_chunk_get_vector');
  late final _duckdb_data_chunk_get_vector = _duckdb_data_chunk_get_vectorPtr
      .asFunction<duckdb_vector Function(duckdb_data_chunk, int)>();

  int duckdb_data_chunk_get_size(
    duckdb_data_chunk chunk,
  ) {
    return _duckdb_data_chunk_get_size(
      chunk,
    );
  }

  late final _duckdb_data_chunk_get_sizePtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_data_chunk)>>(
          'duckdb_data_chunk_get_size');
  late final _duckdb_data_chunk_get_size = _duckdb_data_chunk_get_sizePtr
      .asFunction<int Function(duckdb_data_chunk)>();

  void duckdb_data_chunk_set_size(
    duckdb_data_chunk chunk,
    int size,
  ) {
    return _duckdb_data_chunk_set_size(
      chunk,
      size,
    );
  }

  late final _duckdb_data_chunk_set_sizePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(duckdb_data_chunk, idx_t)>>(
          'duckdb_data_chunk_set_size');
  late final _duckdb_data_chunk_set_size = _duckdb_data_chunk_set_sizePtr
      .asFunction<void Function(duckdb_data_chunk, int)>();

  duckdb_logical_type duckdb_vector_get_column_type(
    duckdb_vector vector,
  ) {
    return _duckdb_vector_get_column_type(
      vector,
    );
  }

  late final _duckdb_vector_get_column_typePtr =
      _lookup<ffi.NativeFunction<duckdb_logical_type Function(duckdb_vector)>>(
          'duckdb_vector_get_column_type');
  late final _duckdb_vector_get_column_type = _duckdb_vector_get_column_typePtr
      .asFunction<duckdb_logical_type Function(duckdb_vector)>();

  ffi.Pointer<ffi.Void> duckdb_vector_get_data(
    duckdb_vector vector,
  ) {
    return _duckdb_vector_get_data(
      vector,
    );
  }

  late final _duckdb_vector_get_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(duckdb_vector)>>(
      'duckdb_vector_get_data');
  late final _duckdb_vector_get_data = _duckdb_vector_get_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(duckdb_vector)>();

  ffi.Pointer<ffi.Uint64> duckdb_vector_get_validity(
    duckdb_vector vector,
  ) {
    return _duckdb_vector_get_validity(
      vector,
    );
  }

  late final _duckdb_vector_get_validityPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Uint64> Function(duckdb_vector)>>(
      'duckdb_vector_get_validity');
  late final _duckdb_vector_get_validity = _duckdb_vector_get_validityPtr
      .asFunction<ffi.Pointer<ffi.Uint64> Function(duckdb_vector)>();

  void duckdb_vector_ensure_validity_writable(
    duckdb_vector vector,
  ) {
    return _duckdb_vector_ensure_validity_writable(
      vector,
    );
  }

  late final _duckdb_vector_ensure_validity_writablePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(duckdb_vector)>>(
          'duckdb_vector_ensure_validity_writable');
  late final _duckdb_vector_ensure_validity_writable =
      _duckdb_vector_ensure_validity_writablePtr
          .asFunction<void Function(duckdb_vector)>();

  void duckdb_vector_assign_string_element(
    duckdb_vector vector,
    int index,
    ffi.Pointer<ffi.Char> str,
  ) {
    return _duckdb_vector_assign_string_element(
      vector,
      index,
      str,
    );
  }

  late final _duckdb_vector_assign_string_elementPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_vector, idx_t,
              ffi.Pointer<ffi.Char>)>>('duckdb_vector_assign_string_element');
  late final _duckdb_vector_assign_string_element =
      _duckdb_vector_assign_string_elementPtr.asFunction<
          void Function(duckdb_vector, int, ffi.Pointer<ffi.Char>)>();

  void duckdb_vector_assign_string_element_len(
    duckdb_vector vector,
    int index,
    ffi.Pointer<ffi.Char> str,
    int str_len,
  ) {
    return _duckdb_vector_assign_string_element_len(
      vector,
      index,
      str,
      str_len,
    );
  }

  late final _duckdb_vector_assign_string_element_lenPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_vector, idx_t, ffi.Pointer<ffi.Char>,
              idx_t)>>('duckdb_vector_assign_string_element_len');
  late final _duckdb_vector_assign_string_element_len =
      _duckdb_vector_assign_string_element_lenPtr.asFunction<
          void Function(duckdb_vector, int, ffi.Pointer<ffi.Char>, int)>();

  duckdb_vector duckdb_list_vector_get_child(
    duckdb_vector vector,
  ) {
    return _duckdb_list_vector_get_child(
      vector,
    );
  }

  late final _duckdb_list_vector_get_childPtr =
      _lookup<ffi.NativeFunction<duckdb_vector Function(duckdb_vector)>>(
          'duckdb_list_vector_get_child');
  late final _duckdb_list_vector_get_child = _duckdb_list_vector_get_childPtr
      .asFunction<duckdb_vector Function(duckdb_vector)>();

  int duckdb_list_vector_get_size(
    duckdb_vector vector,
  ) {
    return _duckdb_list_vector_get_size(
      vector,
    );
  }

  late final _duckdb_list_vector_get_sizePtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_vector)>>(
          'duckdb_list_vector_get_size');
  late final _duckdb_list_vector_get_size =
      _duckdb_list_vector_get_sizePtr.asFunction<int Function(duckdb_vector)>();

  duckdb_vector duckdb_struct_vector_get_child(
    duckdb_vector vector,
    int index,
  ) {
    return _duckdb_struct_vector_get_child(
      vector,
      index,
    );
  }

  late final _duckdb_struct_vector_get_childPtr =
      _lookup<ffi.NativeFunction<duckdb_vector Function(duckdb_vector, idx_t)>>(
          'duckdb_struct_vector_get_child');
  late final _duckdb_struct_vector_get_child =
      _duckdb_struct_vector_get_childPtr
          .asFunction<duckdb_vector Function(duckdb_vector, int)>();

  bool duckdb_validity_row_is_valid(
    ffi.Pointer<ffi.Uint64> validity,
    int row,
  ) {
    return _duckdb_validity_row_is_valid(
      validity,
      row,
    );
  }

  late final _duckdb_validity_row_is_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Bool Function(
              ffi.Pointer<ffi.Uint64>, idx_t)>>('duckdb_validity_row_is_valid');
  late final _duckdb_validity_row_is_valid = _duckdb_validity_row_is_validPtr
      .asFunction<bool Function(ffi.Pointer<ffi.Uint64>, int)>();

  void duckdb_validity_set_row_validity(
    ffi.Pointer<ffi.Uint64> validity,
    int row,
    bool valid,
  ) {
    return _duckdb_validity_set_row_validity(
      validity,
      row,
      valid,
    );
  }

  late final _duckdb_validity_set_row_validityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint64>, idx_t,
              ffi.Bool)>>('duckdb_validity_set_row_validity');
  late final _duckdb_validity_set_row_validity =
      _duckdb_validity_set_row_validityPtr
          .asFunction<void Function(ffi.Pointer<ffi.Uint64>, int, bool)>();

  void duckdb_validity_set_row_invalid(
    ffi.Pointer<ffi.Uint64> validity,
    int row,
  ) {
    return _duckdb_validity_set_row_invalid(
      validity,
      row,
    );
  }

  late final _duckdb_validity_set_row_invalidPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint64>,
              idx_t)>>('duckdb_validity_set_row_invalid');
  late final _duckdb_validity_set_row_invalid =
      _duckdb_validity_set_row_invalidPtr
          .asFunction<void Function(ffi.Pointer<ffi.Uint64>, int)>();

  void duckdb_validity_set_row_valid(
    ffi.Pointer<ffi.Uint64> validity,
    int row,
  ) {
    return _duckdb_validity_set_row_valid(
      validity,
      row,
    );
  }

  late final _duckdb_validity_set_row_validPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(ffi.Pointer<ffi.Uint64>,
              idx_t)>>('duckdb_validity_set_row_valid');
  late final _duckdb_validity_set_row_valid = _duckdb_validity_set_row_validPtr
      .asFunction<void Function(ffi.Pointer<ffi.Uint64>, int)>();

  duckdb_table_function duckdb_create_table_function() {
    return _duckdb_create_table_function();
  }

  late final _duckdb_create_table_functionPtr =
      _lookup<ffi.NativeFunction<duckdb_table_function Function()>>(
          'duckdb_create_table_function');
  late final _duckdb_create_table_function = _duckdb_create_table_functionPtr
      .asFunction<duckdb_table_function Function()>();

  void duckdb_destroy_table_function(
    ffi.Pointer<duckdb_table_function> table_function,
  ) {
    return _duckdb_destroy_table_function(
      table_function,
    );
  }

  late final _duckdb_destroy_table_functionPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(ffi.Pointer<duckdb_table_function>)>>(
      'duckdb_destroy_table_function');
  late final _duckdb_destroy_table_function = _duckdb_destroy_table_functionPtr
      .asFunction<void Function(ffi.Pointer<duckdb_table_function>)>();

  void duckdb_table_function_set_name(
    duckdb_table_function table_function,
    ffi.Pointer<ffi.Char> name,
  ) {
    return _duckdb_table_function_set_name(
      table_function,
      name,
    );
  }

  late final _duckdb_table_function_set_namePtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_table_function,
              ffi.Pointer<ffi.Char>)>>('duckdb_table_function_set_name');
  late final _duckdb_table_function_set_name =
      _duckdb_table_function_set_namePtr.asFunction<
          void Function(duckdb_table_function, ffi.Pointer<ffi.Char>)>();

  void duckdb_table_function_add_parameter(
    duckdb_table_function table_function,
    duckdb_logical_type type,
  ) {
    return _duckdb_table_function_add_parameter(
      table_function,
      type,
    );
  }

  late final _duckdb_table_function_add_parameterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_table_function,
              duckdb_logical_type)>>('duckdb_table_function_add_parameter');
  late final _duckdb_table_function_add_parameter =
      _duckdb_table_function_add_parameterPtr.asFunction<
          void Function(duckdb_table_function, duckdb_logical_type)>();

  void duckdb_table_function_set_extra_info(
    duckdb_table_function table_function,
    ffi.Pointer<ffi.Void> extra_info,
    duckdb_delete_callback_t destroy,
  ) {
    return _duckdb_table_function_set_extra_info(
      table_function,
      extra_info,
      destroy,
    );
  }

  late final _duckdb_table_function_set_extra_infoPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(duckdb_table_function, ffi.Pointer<ffi.Void>,
                  duckdb_delete_callback_t)>>(
      'duckdb_table_function_set_extra_info');
  late final _duckdb_table_function_set_extra_info =
      _duckdb_table_function_set_extra_infoPtr.asFunction<
          void Function(duckdb_table_function, ffi.Pointer<ffi.Void>,
              duckdb_delete_callback_t)>();

  void duckdb_table_function_set_bind(
    duckdb_table_function table_function,
    duckdb_table_function_bind_t bind,
  ) {
    return _duckdb_table_function_set_bind(
      table_function,
      bind,
    );
  }

  late final _duckdb_table_function_set_bindPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_table_function,
              duckdb_table_function_bind_t)>>('duckdb_table_function_set_bind');
  late final _duckdb_table_function_set_bind =
      _duckdb_table_function_set_bindPtr.asFunction<
          void Function(duckdb_table_function, duckdb_table_function_bind_t)>();

  void duckdb_table_function_set_init(
    duckdb_table_function table_function,
    duckdb_table_function_init_t init,
  ) {
    return _duckdb_table_function_set_init(
      table_function,
      init,
    );
  }

  late final _duckdb_table_function_set_initPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_table_function,
              duckdb_table_function_init_t)>>('duckdb_table_function_set_init');
  late final _duckdb_table_function_set_init =
      _duckdb_table_function_set_initPtr.asFunction<
          void Function(duckdb_table_function, duckdb_table_function_init_t)>();

  void duckdb_table_function_set_local_init(
    duckdb_table_function table_function,
    duckdb_table_function_init_t init,
  ) {
    return _duckdb_table_function_set_local_init(
      table_function,
      init,
    );
  }

  late final _duckdb_table_function_set_local_initPtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  duckdb_table_function, duckdb_table_function_init_t)>>(
      'duckdb_table_function_set_local_init');
  late final _duckdb_table_function_set_local_init =
      _duckdb_table_function_set_local_initPtr.asFunction<
          void Function(duckdb_table_function, duckdb_table_function_init_t)>();

  void duckdb_table_function_set_function(
    duckdb_table_function table_function,
    duckdb_table_function_t function,
  ) {
    return _duckdb_table_function_set_function(
      table_function,
      function,
    );
  }

  late final _duckdb_table_function_set_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_table_function,
              duckdb_table_function_t)>>('duckdb_table_function_set_function');
  late final _duckdb_table_function_set_function =
      _duckdb_table_function_set_functionPtr.asFunction<
          void Function(duckdb_table_function, duckdb_table_function_t)>();

  void duckdb_table_function_supports_projection_pushdown(
    duckdb_table_function table_function,
    bool pushdown,
  ) {
    return _duckdb_table_function_supports_projection_pushdown(
      table_function,
      pushdown,
    );
  }

  late final _duckdb_table_function_supports_projection_pushdownPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_table_function,
              ffi.Bool)>>('duckdb_table_function_supports_projection_pushdown');
  late final _duckdb_table_function_supports_projection_pushdown =
      _duckdb_table_function_supports_projection_pushdownPtr
          .asFunction<void Function(duckdb_table_function, bool)>();

  int duckdb_register_table_function(
    duckdb_connection con,
    duckdb_table_function function,
  ) {
    return _duckdb_register_table_function(
      con,
      function,
    );
  }

  late final _duckdb_register_table_functionPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_connection,
              duckdb_table_function)>>('duckdb_register_table_function');
  late final _duckdb_register_table_function =
      _duckdb_register_table_functionPtr
          .asFunction<int Function(duckdb_connection, duckdb_table_function)>();

  ffi.Pointer<ffi.Void> duckdb_bind_get_extra_info(
    duckdb_bind_info info,
  ) {
    return _duckdb_bind_get_extra_info(
      info,
    );
  }

  late final _duckdb_bind_get_extra_infoPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(duckdb_bind_info)>>(
      'duckdb_bind_get_extra_info');
  late final _duckdb_bind_get_extra_info = _duckdb_bind_get_extra_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(duckdb_bind_info)>();

  void duckdb_bind_add_result_column(
    duckdb_bind_info info,
    ffi.Pointer<ffi.Char> name,
    duckdb_logical_type type,
  ) {
    return _duckdb_bind_add_result_column(
      info,
      name,
      type,
    );
  }

  late final _duckdb_bind_add_result_columnPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_bind_info, ffi.Pointer<ffi.Char>,
              duckdb_logical_type)>>('duckdb_bind_add_result_column');
  late final _duckdb_bind_add_result_column =
      _duckdb_bind_add_result_columnPtr.asFunction<
          void Function(
              duckdb_bind_info, ffi.Pointer<ffi.Char>, duckdb_logical_type)>();

  int duckdb_bind_get_parameter_count(
    duckdb_bind_info info,
  ) {
    return _duckdb_bind_get_parameter_count(
      info,
    );
  }

  late final _duckdb_bind_get_parameter_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_bind_info)>>(
          'duckdb_bind_get_parameter_count');
  late final _duckdb_bind_get_parameter_count =
      _duckdb_bind_get_parameter_countPtr
          .asFunction<int Function(duckdb_bind_info)>();

  duckdb_value duckdb_bind_get_parameter(
    duckdb_bind_info info,
    int index,
  ) {
    return _duckdb_bind_get_parameter(
      info,
      index,
    );
  }

  late final _duckdb_bind_get_parameterPtr = _lookup<
          ffi.NativeFunction<duckdb_value Function(duckdb_bind_info, idx_t)>>(
      'duckdb_bind_get_parameter');
  late final _duckdb_bind_get_parameter = _duckdb_bind_get_parameterPtr
      .asFunction<duckdb_value Function(duckdb_bind_info, int)>();

  void duckdb_bind_set_bind_data(
    duckdb_bind_info info,
    ffi.Pointer<ffi.Void> bind_data,
    duckdb_delete_callback_t destroy,
  ) {
    return _duckdb_bind_set_bind_data(
      info,
      bind_data,
      destroy,
    );
  }

  late final _duckdb_bind_set_bind_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_bind_info, ffi.Pointer<ffi.Void>,
              duckdb_delete_callback_t)>>('duckdb_bind_set_bind_data');
  late final _duckdb_bind_set_bind_data =
      _duckdb_bind_set_bind_dataPtr.asFunction<
          void Function(duckdb_bind_info, ffi.Pointer<ffi.Void>,
              duckdb_delete_callback_t)>();

  void duckdb_bind_set_cardinality(
    duckdb_bind_info info,
    int cardinality,
    bool is_exact,
  ) {
    return _duckdb_bind_set_cardinality(
      info,
      cardinality,
      is_exact,
    );
  }

  late final _duckdb_bind_set_cardinalityPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_bind_info, idx_t,
              ffi.Bool)>>('duckdb_bind_set_cardinality');
  late final _duckdb_bind_set_cardinality = _duckdb_bind_set_cardinalityPtr
      .asFunction<void Function(duckdb_bind_info, int, bool)>();

  void duckdb_bind_set_error(
    duckdb_bind_info info,
    ffi.Pointer<ffi.Char> error,
  ) {
    return _duckdb_bind_set_error(
      info,
      error,
    );
  }

  late final _duckdb_bind_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_bind_info,
              ffi.Pointer<ffi.Char>)>>('duckdb_bind_set_error');
  late final _duckdb_bind_set_error = _duckdb_bind_set_errorPtr
      .asFunction<void Function(duckdb_bind_info, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> duckdb_init_get_extra_info(
    duckdb_init_info info,
  ) {
    return _duckdb_init_get_extra_info(
      info,
    );
  }

  late final _duckdb_init_get_extra_infoPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(duckdb_init_info)>>(
      'duckdb_init_get_extra_info');
  late final _duckdb_init_get_extra_info = _duckdb_init_get_extra_infoPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(duckdb_init_info)>();

  ffi.Pointer<ffi.Void> duckdb_init_get_bind_data(
    duckdb_init_info info,
  ) {
    return _duckdb_init_get_bind_data(
      info,
    );
  }

  late final _duckdb_init_get_bind_dataPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Void> Function(duckdb_init_info)>>(
      'duckdb_init_get_bind_data');
  late final _duckdb_init_get_bind_data = _duckdb_init_get_bind_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(duckdb_init_info)>();

  void duckdb_init_set_init_data(
    duckdb_init_info info,
    ffi.Pointer<ffi.Void> init_data,
    duckdb_delete_callback_t destroy,
  ) {
    return _duckdb_init_set_init_data(
      info,
      init_data,
      destroy,
    );
  }

  late final _duckdb_init_set_init_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_init_info, ffi.Pointer<ffi.Void>,
              duckdb_delete_callback_t)>>('duckdb_init_set_init_data');
  late final _duckdb_init_set_init_data =
      _duckdb_init_set_init_dataPtr.asFunction<
          void Function(duckdb_init_info, ffi.Pointer<ffi.Void>,
              duckdb_delete_callback_t)>();

  int duckdb_init_get_column_count(
    duckdb_init_info info,
  ) {
    return _duckdb_init_get_column_count(
      info,
    );
  }

  late final _duckdb_init_get_column_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_init_info)>>(
          'duckdb_init_get_column_count');
  late final _duckdb_init_get_column_count = _duckdb_init_get_column_countPtr
      .asFunction<int Function(duckdb_init_info)>();

  int duckdb_init_get_column_index(
    duckdb_init_info info,
    int column_index,
  ) {
    return _duckdb_init_get_column_index(
      info,
      column_index,
    );
  }

  late final _duckdb_init_get_column_indexPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_init_info, idx_t)>>(
          'duckdb_init_get_column_index');
  late final _duckdb_init_get_column_index = _duckdb_init_get_column_indexPtr
      .asFunction<int Function(duckdb_init_info, int)>();

  void duckdb_init_set_max_threads(
    duckdb_init_info info,
    int max_threads,
  ) {
    return _duckdb_init_set_max_threads(
      info,
      max_threads,
    );
  }

  late final _duckdb_init_set_max_threadsPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(duckdb_init_info, idx_t)>>(
          'duckdb_init_set_max_threads');
  late final _duckdb_init_set_max_threads = _duckdb_init_set_max_threadsPtr
      .asFunction<void Function(duckdb_init_info, int)>();

  void duckdb_init_set_error(
    duckdb_init_info info,
    ffi.Pointer<ffi.Char> error,
  ) {
    return _duckdb_init_set_error(
      info,
      error,
    );
  }

  late final _duckdb_init_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_init_info,
              ffi.Pointer<ffi.Char>)>>('duckdb_init_set_error');
  late final _duckdb_init_set_error = _duckdb_init_set_errorPtr
      .asFunction<void Function(duckdb_init_info, ffi.Pointer<ffi.Char>)>();

  ffi.Pointer<ffi.Void> duckdb_function_get_extra_info(
    duckdb_function_info info,
  ) {
    return _duckdb_function_get_extra_info(
      info,
    );
  }

  late final _duckdb_function_get_extra_infoPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              duckdb_function_info)>>('duckdb_function_get_extra_info');
  late final _duckdb_function_get_extra_info =
      _duckdb_function_get_extra_infoPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(duckdb_function_info)>();

  ffi.Pointer<ffi.Void> duckdb_function_get_bind_data(
    duckdb_function_info info,
  ) {
    return _duckdb_function_get_bind_data(
      info,
    );
  }

  late final _duckdb_function_get_bind_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              duckdb_function_info)>>('duckdb_function_get_bind_data');
  late final _duckdb_function_get_bind_data = _duckdb_function_get_bind_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(duckdb_function_info)>();

  ffi.Pointer<ffi.Void> duckdb_function_get_init_data(
    duckdb_function_info info,
  ) {
    return _duckdb_function_get_init_data(
      info,
    );
  }

  late final _duckdb_function_get_init_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              duckdb_function_info)>>('duckdb_function_get_init_data');
  late final _duckdb_function_get_init_data = _duckdb_function_get_init_dataPtr
      .asFunction<ffi.Pointer<ffi.Void> Function(duckdb_function_info)>();

  ffi.Pointer<ffi.Void> duckdb_function_get_local_init_data(
    duckdb_function_info info,
  ) {
    return _duckdb_function_get_local_init_data(
      info,
    );
  }

  late final _duckdb_function_get_local_init_dataPtr = _lookup<
      ffi.NativeFunction<
          ffi.Pointer<ffi.Void> Function(
              duckdb_function_info)>>('duckdb_function_get_local_init_data');
  late final _duckdb_function_get_local_init_data =
      _duckdb_function_get_local_init_dataPtr
          .asFunction<ffi.Pointer<ffi.Void> Function(duckdb_function_info)>();

  void duckdb_function_set_error(
    duckdb_function_info info,
    ffi.Pointer<ffi.Char> error,
  ) {
    return _duckdb_function_set_error(
      info,
      error,
    );
  }

  late final _duckdb_function_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_function_info,
              ffi.Pointer<ffi.Char>)>>('duckdb_function_set_error');
  late final _duckdb_function_set_error = _duckdb_function_set_errorPtr
      .asFunction<void Function(duckdb_function_info, ffi.Pointer<ffi.Char>)>();

  void duckdb_add_replacement_scan(
    duckdb_database db,
    duckdb_replacement_callback_t replacement,
    ffi.Pointer<ffi.Void> extra_data,
    duckdb_delete_callback_t delete_callback,
  ) {
    return _duckdb_add_replacement_scan(
      db,
      replacement,
      extra_data,
      delete_callback,
    );
  }

  late final _duckdb_add_replacement_scanPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(
              duckdb_database,
              duckdb_replacement_callback_t,
              ffi.Pointer<ffi.Void>,
              duckdb_delete_callback_t)>>('duckdb_add_replacement_scan');
  late final _duckdb_add_replacement_scan =
      _duckdb_add_replacement_scanPtr.asFunction<
          void Function(duckdb_database, duckdb_replacement_callback_t,
              ffi.Pointer<ffi.Void>, duckdb_delete_callback_t)>();

  void duckdb_replacement_scan_set_function_name(
    duckdb_replacement_scan_info info,
    ffi.Pointer<ffi.Char> function_name,
  ) {
    return _duckdb_replacement_scan_set_function_name(
      info,
      function_name,
    );
  }

  late final _duckdb_replacement_scan_set_function_namePtr = _lookup<
          ffi.NativeFunction<
              ffi.Void Function(
                  duckdb_replacement_scan_info, ffi.Pointer<ffi.Char>)>>(
      'duckdb_replacement_scan_set_function_name');
  late final _duckdb_replacement_scan_set_function_name =
      _duckdb_replacement_scan_set_function_namePtr.asFunction<
          void Function(duckdb_replacement_scan_info, ffi.Pointer<ffi.Char>)>();

  void duckdb_replacement_scan_add_parameter(
    duckdb_replacement_scan_info info,
    duckdb_value parameter,
  ) {
    return _duckdb_replacement_scan_add_parameter(
      info,
      parameter,
    );
  }

  late final _duckdb_replacement_scan_add_parameterPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_replacement_scan_info,
              duckdb_value)>>('duckdb_replacement_scan_add_parameter');
  late final _duckdb_replacement_scan_add_parameter =
      _duckdb_replacement_scan_add_parameterPtr.asFunction<
          void Function(duckdb_replacement_scan_info, duckdb_value)>();

  void duckdb_replacement_scan_set_error(
    duckdb_replacement_scan_info info,
    ffi.Pointer<ffi.Char> error,
  ) {
    return _duckdb_replacement_scan_set_error(
      info,
      error,
    );
  }

  late final _duckdb_replacement_scan_set_errorPtr = _lookup<
      ffi.NativeFunction<
          ffi.Void Function(duckdb_replacement_scan_info,
              ffi.Pointer<ffi.Char>)>>('duckdb_replacement_scan_set_error');
  late final _duckdb_replacement_scan_set_error =
      _duckdb_replacement_scan_set_errorPtr.asFunction<
          void Function(duckdb_replacement_scan_info, ffi.Pointer<ffi.Char>)>();

  int duckdb_appender_create(
    duckdb_connection connection,
    ffi.Pointer<ffi.Char> schema,
    ffi.Pointer<ffi.Char> table,
    ffi.Pointer<duckdb_appender> out_appender,
  ) {
    return _duckdb_appender_create(
      connection,
      schema,
      table,
      out_appender,
    );
  }

  late final _duckdb_appender_createPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              duckdb_connection,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<ffi.Char>,
              ffi.Pointer<duckdb_appender>)>>('duckdb_appender_create');
  late final _duckdb_appender_create = _duckdb_appender_createPtr.asFunction<
      int Function(duckdb_connection, ffi.Pointer<ffi.Char>,
          ffi.Pointer<ffi.Char>, ffi.Pointer<duckdb_appender>)>();

  ffi.Pointer<ffi.Char> duckdb_appender_error(
    duckdb_appender appender,
  ) {
    return _duckdb_appender_error(
      appender,
    );
  }

  late final _duckdb_appender_errorPtr = _lookup<
          ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(duckdb_appender)>>(
      'duckdb_appender_error');
  late final _duckdb_appender_error = _duckdb_appender_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(duckdb_appender)>();

  int duckdb_appender_flush(
    duckdb_appender appender,
  ) {
    return _duckdb_appender_flush(
      appender,
    );
  }

  late final _duckdb_appender_flushPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_appender)>>(
          'duckdb_appender_flush');
  late final _duckdb_appender_flush =
      _duckdb_appender_flushPtr.asFunction<int Function(duckdb_appender)>();

  int duckdb_appender_close(
    duckdb_appender appender,
  ) {
    return _duckdb_appender_close(
      appender,
    );
  }

  late final _duckdb_appender_closePtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_appender)>>(
          'duckdb_appender_close');
  late final _duckdb_appender_close =
      _duckdb_appender_closePtr.asFunction<int Function(duckdb_appender)>();

  int duckdb_appender_destroy(
    ffi.Pointer<duckdb_appender> appender,
  ) {
    return _duckdb_appender_destroy(
      appender,
    );
  }

  late final _duckdb_appender_destroyPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(ffi.Pointer<duckdb_appender>)>>(
      'duckdb_appender_destroy');
  late final _duckdb_appender_destroy = _duckdb_appender_destroyPtr
      .asFunction<int Function(ffi.Pointer<duckdb_appender>)>();

  int duckdb_appender_begin_row(
    duckdb_appender appender,
  ) {
    return _duckdb_appender_begin_row(
      appender,
    );
  }

  late final _duckdb_appender_begin_rowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_appender)>>(
          'duckdb_appender_begin_row');
  late final _duckdb_appender_begin_row =
      _duckdb_appender_begin_rowPtr.asFunction<int Function(duckdb_appender)>();

  int duckdb_appender_end_row(
    duckdb_appender appender,
  ) {
    return _duckdb_appender_end_row(
      appender,
    );
  }

  late final _duckdb_appender_end_rowPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_appender)>>(
          'duckdb_appender_end_row');
  late final _duckdb_appender_end_row =
      _duckdb_appender_end_rowPtr.asFunction<int Function(duckdb_appender)>();

  int duckdb_append_bool(
    duckdb_appender appender,
    bool value,
  ) {
    return _duckdb_append_bool(
      appender,
      value,
    );
  }

  late final _duckdb_append_boolPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Bool)>>(
      'duckdb_append_bool');
  late final _duckdb_append_bool =
      _duckdb_append_boolPtr.asFunction<int Function(duckdb_appender, bool)>();

  int duckdb_append_int8(
    duckdb_appender appender,
    int value,
  ) {
    return _duckdb_append_int8(
      appender,
      value,
    );
  }

  late final _duckdb_append_int8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Int8)>>(
      'duckdb_append_int8');
  late final _duckdb_append_int8 =
      _duckdb_append_int8Ptr.asFunction<int Function(duckdb_appender, int)>();

  int duckdb_append_int16(
    duckdb_appender appender,
    int value,
  ) {
    return _duckdb_append_int16(
      appender,
      value,
    );
  }

  late final _duckdb_append_int16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Int16)>>(
      'duckdb_append_int16');
  late final _duckdb_append_int16 =
      _duckdb_append_int16Ptr.asFunction<int Function(duckdb_appender, int)>();

  int duckdb_append_int32(
    duckdb_appender appender,
    int value,
  ) {
    return _duckdb_append_int32(
      appender,
      value,
    );
  }

  late final _duckdb_append_int32Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Int32)>>(
      'duckdb_append_int32');
  late final _duckdb_append_int32 =
      _duckdb_append_int32Ptr.asFunction<int Function(duckdb_appender, int)>();

  int duckdb_append_int64(
    duckdb_appender appender,
    int value,
  ) {
    return _duckdb_append_int64(
      appender,
      value,
    );
  }

  late final _duckdb_append_int64Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Int64)>>(
      'duckdb_append_int64');
  late final _duckdb_append_int64 =
      _duckdb_append_int64Ptr.asFunction<int Function(duckdb_appender, int)>();

  int duckdb_append_hugeint(
    duckdb_appender appender,
    duckdb_hugeint value,
  ) {
    return _duckdb_append_hugeint(
      appender,
      value,
    );
  }

  late final _duckdb_append_hugeintPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              duckdb_appender, duckdb_hugeint)>>('duckdb_append_hugeint');
  late final _duckdb_append_hugeint = _duckdb_append_hugeintPtr
      .asFunction<int Function(duckdb_appender, duckdb_hugeint)>();

  int duckdb_append_uint8(
    duckdb_appender appender,
    int value,
  ) {
    return _duckdb_append_uint8(
      appender,
      value,
    );
  }

  late final _duckdb_append_uint8Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Uint8)>>(
      'duckdb_append_uint8');
  late final _duckdb_append_uint8 =
      _duckdb_append_uint8Ptr.asFunction<int Function(duckdb_appender, int)>();

  int duckdb_append_uint16(
    duckdb_appender appender,
    int value,
  ) {
    return _duckdb_append_uint16(
      appender,
      value,
    );
  }

  late final _duckdb_append_uint16Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Uint16)>>(
      'duckdb_append_uint16');
  late final _duckdb_append_uint16 =
      _duckdb_append_uint16Ptr.asFunction<int Function(duckdb_appender, int)>();

  int duckdb_append_uint32(
    duckdb_appender appender,
    int value,
  ) {
    return _duckdb_append_uint32(
      appender,
      value,
    );
  }

  late final _duckdb_append_uint32Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Uint32)>>(
      'duckdb_append_uint32');
  late final _duckdb_append_uint32 =
      _duckdb_append_uint32Ptr.asFunction<int Function(duckdb_appender, int)>();

  int duckdb_append_uint64(
    duckdb_appender appender,
    int value,
  ) {
    return _duckdb_append_uint64(
      appender,
      value,
    );
  }

  late final _duckdb_append_uint64Ptr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Uint64)>>(
      'duckdb_append_uint64');
  late final _duckdb_append_uint64 =
      _duckdb_append_uint64Ptr.asFunction<int Function(duckdb_appender, int)>();

  int duckdb_append_float(
    duckdb_appender appender,
    double value,
  ) {
    return _duckdb_append_float(
      appender,
      value,
    );
  }

  late final _duckdb_append_floatPtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Float)>>(
      'duckdb_append_float');
  late final _duckdb_append_float = _duckdb_append_floatPtr
      .asFunction<int Function(duckdb_appender, double)>();

  int duckdb_append_double(
    duckdb_appender appender,
    double value,
  ) {
    return _duckdb_append_double(
      appender,
      value,
    );
  }

  late final _duckdb_append_doublePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, ffi.Double)>>(
      'duckdb_append_double');
  late final _duckdb_append_double = _duckdb_append_doublePtr
      .asFunction<int Function(duckdb_appender, double)>();

  int duckdb_append_date(
    duckdb_appender appender,
    duckdb_date value,
  ) {
    return _duckdb_append_date(
      appender,
      value,
    );
  }

  late final _duckdb_append_datePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, duckdb_date)>>(
      'duckdb_append_date');
  late final _duckdb_append_date = _duckdb_append_datePtr
      .asFunction<int Function(duckdb_appender, duckdb_date)>();

  int duckdb_append_time(
    duckdb_appender appender,
    duckdb_time value,
  ) {
    return _duckdb_append_time(
      appender,
      value,
    );
  }

  late final _duckdb_append_timePtr = _lookup<
          ffi.NativeFunction<ffi.Int32 Function(duckdb_appender, duckdb_time)>>(
      'duckdb_append_time');
  late final _duckdb_append_time = _duckdb_append_timePtr
      .asFunction<int Function(duckdb_appender, duckdb_time)>();

  int duckdb_append_timestamp(
    duckdb_appender appender,
    duckdb_timestamp value,
  ) {
    return _duckdb_append_timestamp(
      appender,
      value,
    );
  }

  late final _duckdb_append_timestampPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              duckdb_appender, duckdb_timestamp)>>('duckdb_append_timestamp');
  late final _duckdb_append_timestamp = _duckdb_append_timestampPtr
      .asFunction<int Function(duckdb_appender, duckdb_timestamp)>();

  int duckdb_append_interval(
    duckdb_appender appender,
    duckdb_interval value,
  ) {
    return _duckdb_append_interval(
      appender,
      value,
    );
  }

  late final _duckdb_append_intervalPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              duckdb_appender, duckdb_interval)>>('duckdb_append_interval');
  late final _duckdb_append_interval = _duckdb_append_intervalPtr
      .asFunction<int Function(duckdb_appender, duckdb_interval)>();

  int duckdb_append_varchar(
    duckdb_appender appender,
    ffi.Pointer<ffi.Char> val,
  ) {
    return _duckdb_append_varchar(
      appender,
      val,
    );
  }

  late final _duckdb_append_varcharPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_appender,
              ffi.Pointer<ffi.Char>)>>('duckdb_append_varchar');
  late final _duckdb_append_varchar = _duckdb_append_varcharPtr
      .asFunction<int Function(duckdb_appender, ffi.Pointer<ffi.Char>)>();

  int duckdb_append_varchar_length(
    duckdb_appender appender,
    ffi.Pointer<ffi.Char> val,
    int length,
  ) {
    return _duckdb_append_varchar_length(
      appender,
      val,
      length,
    );
  }

  late final _duckdb_append_varchar_lengthPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_appender, ffi.Pointer<ffi.Char>,
              idx_t)>>('duckdb_append_varchar_length');
  late final _duckdb_append_varchar_length = _duckdb_append_varchar_lengthPtr
      .asFunction<int Function(duckdb_appender, ffi.Pointer<ffi.Char>, int)>();

  int duckdb_append_blob(
    duckdb_appender appender,
    ffi.Pointer<ffi.Void> data,
    int length,
  ) {
    return _duckdb_append_blob(
      appender,
      data,
      length,
    );
  }

  late final _duckdb_append_blobPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_appender, ffi.Pointer<ffi.Void>,
              idx_t)>>('duckdb_append_blob');
  late final _duckdb_append_blob = _duckdb_append_blobPtr
      .asFunction<int Function(duckdb_appender, ffi.Pointer<ffi.Void>, int)>();

  int duckdb_append_null(
    duckdb_appender appender,
  ) {
    return _duckdb_append_null(
      appender,
    );
  }

  late final _duckdb_append_nullPtr =
      _lookup<ffi.NativeFunction<ffi.Int32 Function(duckdb_appender)>>(
          'duckdb_append_null');
  late final _duckdb_append_null =
      _duckdb_append_nullPtr.asFunction<int Function(duckdb_appender)>();

  int duckdb_append_data_chunk(
    duckdb_appender appender,
    duckdb_data_chunk chunk,
  ) {
    return _duckdb_append_data_chunk(
      appender,
      chunk,
    );
  }

  late final _duckdb_append_data_chunkPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(
              duckdb_appender, duckdb_data_chunk)>>('duckdb_append_data_chunk');
  late final _duckdb_append_data_chunk = _duckdb_append_data_chunkPtr
      .asFunction<int Function(duckdb_appender, duckdb_data_chunk)>();

  int duckdb_query_arrow(
    duckdb_connection connection,
    ffi.Pointer<ffi.Char> query,
    ffi.Pointer<duckdb_arrow> out_result,
  ) {
    return _duckdb_query_arrow(
      connection,
      query,
      out_result,
    );
  }

  late final _duckdb_query_arrowPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_connection, ffi.Pointer<ffi.Char>,
              ffi.Pointer<duckdb_arrow>)>>('duckdb_query_arrow');
  late final _duckdb_query_arrow = _duckdb_query_arrowPtr.asFunction<
      int Function(duckdb_connection, ffi.Pointer<ffi.Char>,
          ffi.Pointer<duckdb_arrow>)>();

  int duckdb_query_arrow_schema(
    duckdb_arrow result,
    ffi.Pointer<duckdb_arrow_schema> out_schema,
  ) {
    return _duckdb_query_arrow_schema(
      result,
      out_schema,
    );
  }

  late final _duckdb_query_arrow_schemaPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_arrow,
              ffi.Pointer<duckdb_arrow_schema>)>>('duckdb_query_arrow_schema');
  late final _duckdb_query_arrow_schema =
      _duckdb_query_arrow_schemaPtr.asFunction<
          int Function(duckdb_arrow, ffi.Pointer<duckdb_arrow_schema>)>();

  int duckdb_query_arrow_array(
    duckdb_arrow result,
    ffi.Pointer<duckdb_arrow_array> out_array,
  ) {
    return _duckdb_query_arrow_array(
      result,
      out_array,
    );
  }

  late final _duckdb_query_arrow_arrayPtr = _lookup<
      ffi.NativeFunction<
          ffi.Int32 Function(duckdb_arrow,
              ffi.Pointer<duckdb_arrow_array>)>>('duckdb_query_arrow_array');
  late final _duckdb_query_arrow_array =
      _duckdb_query_arrow_arrayPtr.asFunction<
          int Function(duckdb_arrow, ffi.Pointer<duckdb_arrow_array>)>();

  int duckdb_arrow_column_count(
    duckdb_arrow result,
  ) {
    return _duckdb_arrow_column_count(
      result,
    );
  }

  late final _duckdb_arrow_column_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_arrow)>>(
          'duckdb_arrow_column_count');
  late final _duckdb_arrow_column_count =
      _duckdb_arrow_column_countPtr.asFunction<int Function(duckdb_arrow)>();

  int duckdb_arrow_row_count(
    duckdb_arrow result,
  ) {
    return _duckdb_arrow_row_count(
      result,
    );
  }

  late final _duckdb_arrow_row_countPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_arrow)>>(
          'duckdb_arrow_row_count');
  late final _duckdb_arrow_row_count =
      _duckdb_arrow_row_countPtr.asFunction<int Function(duckdb_arrow)>();

  int duckdb_arrow_rows_changed(
    duckdb_arrow result,
  ) {
    return _duckdb_arrow_rows_changed(
      result,
    );
  }

  late final _duckdb_arrow_rows_changedPtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_arrow)>>(
          'duckdb_arrow_rows_changed');
  late final _duckdb_arrow_rows_changed =
      _duckdb_arrow_rows_changedPtr.asFunction<int Function(duckdb_arrow)>();

  ffi.Pointer<ffi.Char> duckdb_query_arrow_error(
    duckdb_arrow result,
  ) {
    return _duckdb_query_arrow_error(
      result,
    );
  }

  late final _duckdb_query_arrow_errorPtr =
      _lookup<ffi.NativeFunction<ffi.Pointer<ffi.Char> Function(duckdb_arrow)>>(
          'duckdb_query_arrow_error');
  late final _duckdb_query_arrow_error = _duckdb_query_arrow_errorPtr
      .asFunction<ffi.Pointer<ffi.Char> Function(duckdb_arrow)>();

  void duckdb_destroy_arrow(
    ffi.Pointer<duckdb_arrow> result,
  ) {
    return _duckdb_destroy_arrow(
      result,
    );
  }

  late final _duckdb_destroy_arrowPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<duckdb_arrow>)>>(
          'duckdb_destroy_arrow');
  late final _duckdb_destroy_arrow = _duckdb_destroy_arrowPtr
      .asFunction<void Function(ffi.Pointer<duckdb_arrow>)>();

  void duckdb_execute_tasks(
    duckdb_database database,
    int max_tasks,
  ) {
    return _duckdb_execute_tasks(
      database,
      max_tasks,
    );
  }

  late final _duckdb_execute_tasksPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(duckdb_database, idx_t)>>(
          'duckdb_execute_tasks');
  late final _duckdb_execute_tasks = _duckdb_execute_tasksPtr
      .asFunction<void Function(duckdb_database, int)>();

  duckdb_task_state duckdb_create_task_state(
    duckdb_database database,
  ) {
    return _duckdb_create_task_state(
      database,
    );
  }

  late final _duckdb_create_task_statePtr =
      _lookup<ffi.NativeFunction<duckdb_task_state Function(duckdb_database)>>(
          'duckdb_create_task_state');
  late final _duckdb_create_task_state = _duckdb_create_task_statePtr
      .asFunction<duckdb_task_state Function(duckdb_database)>();

  void duckdb_execute_tasks_state(
    duckdb_task_state state,
  ) {
    return _duckdb_execute_tasks_state(
      state,
    );
  }

  late final _duckdb_execute_tasks_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(duckdb_task_state)>>(
          'duckdb_execute_tasks_state');
  late final _duckdb_execute_tasks_state = _duckdb_execute_tasks_statePtr
      .asFunction<void Function(duckdb_task_state)>();

  int duckdb_execute_n_tasks_state(
    duckdb_task_state state,
    int max_tasks,
  ) {
    return _duckdb_execute_n_tasks_state(
      state,
      max_tasks,
    );
  }

  late final _duckdb_execute_n_tasks_statePtr =
      _lookup<ffi.NativeFunction<idx_t Function(duckdb_task_state, idx_t)>>(
          'duckdb_execute_n_tasks_state');
  late final _duckdb_execute_n_tasks_state = _duckdb_execute_n_tasks_statePtr
      .asFunction<int Function(duckdb_task_state, int)>();

  void duckdb_finish_execution(
    duckdb_task_state state,
  ) {
    return _duckdb_finish_execution(
      state,
    );
  }

  late final _duckdb_finish_executionPtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(duckdb_task_state)>>(
          'duckdb_finish_execution');
  late final _duckdb_finish_execution = _duckdb_finish_executionPtr
      .asFunction<void Function(duckdb_task_state)>();

  bool duckdb_task_state_is_finished(
    duckdb_task_state state,
  ) {
    return _duckdb_task_state_is_finished(
      state,
    );
  }

  late final _duckdb_task_state_is_finishedPtr =
      _lookup<ffi.NativeFunction<ffi.Bool Function(duckdb_task_state)>>(
          'duckdb_task_state_is_finished');
  late final _duckdb_task_state_is_finished = _duckdb_task_state_is_finishedPtr
      .asFunction<bool Function(duckdb_task_state)>();

  void duckdb_destroy_task_state(
    duckdb_task_state state,
  ) {
    return _duckdb_destroy_task_state(
      state,
    );
  }

  late final _duckdb_destroy_task_statePtr =
      _lookup<ffi.NativeFunction<ffi.Void Function(duckdb_task_state)>>(
          'duckdb_destroy_task_state');
  late final _duckdb_destroy_task_state = _duckdb_destroy_task_statePtr
      .asFunction<void Function(duckdb_task_state)>();
}

typedef va_list = ffi.Pointer<ffi.Char>;
typedef uintptr_t = ffi.UnsignedLongLong;

class __crt_locale_data_public extends ffi.Struct {
  external ffi.Pointer<ffi.UnsignedShort> _locale_pctype;

  @ffi.Int()
  external int _locale_mb_cur_max;

  @ffi.UnsignedInt()
  external int _locale_lc_codepage;
}

class __crt_locale_pointers extends ffi.Struct {
  external ffi.Pointer<__crt_locale_data> locinfo;

  external ffi.Pointer<__crt_multibyte_data> mbcinfo;
}

class __crt_locale_data extends ffi.Opaque {}

class __crt_multibyte_data extends ffi.Opaque {}

class _Mbstatet extends ffi.Struct {
  @ffi.UnsignedLong()
  external int _Wchar;

  @ffi.UnsignedShort()
  external int _Byte;

  @ffi.UnsignedShort()
  external int _State;
}

typedef errno_t = ffi.Int;
typedef rsize_t = ffi.Size;
typedef _CoreCrtSecureSearchSortCompareFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>,
            ffi.Pointer<ffi.Void>)>>;
typedef _CoreCrtNonSecureSearchSortCompareFunction = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Int Function(ffi.Pointer<ffi.Void>, ffi.Pointer<ffi.Void>)>>;
typedef _locale_t = ffi.Pointer<__crt_locale_pointers>;
typedef _onexit_t = ffi.Pointer<ffi.NativeFunction<ffi.Int Function()>>;
typedef _purecall_handler
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function()>>;
typedef _invalid_parameter_handler = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(ffi.Pointer<ffi.WChar>, ffi.Pointer<ffi.WChar>,
            ffi.Pointer<ffi.WChar>, ffi.UnsignedInt, uintptr_t)>>;

class _div_t extends ffi.Struct {
  @ffi.Int()
  external int quot;

  @ffi.Int()
  external int rem;
}

class _ldiv_t extends ffi.Struct {
  @ffi.Long()
  external int quot;

  @ffi.Long()
  external int rem;
}

class _lldiv_t extends ffi.Struct {
  @ffi.LongLong()
  external int quot;

  @ffi.LongLong()
  external int rem;
}

typedef div_t = _div_t;
typedef ldiv_t = _ldiv_t;
typedef lldiv_t = _lldiv_t;

class _LDOUBLE extends ffi.Struct {
  @ffi.Array.multi([10])
  external ffi.Array<ffi.UnsignedChar> ld;
}

class _CRT_DOUBLE extends ffi.Struct {
  @ffi.Double()
  external double x;
}

class _CRT_FLOAT extends ffi.Struct {
  @ffi.Float()
  external double f;
}

class _LONGDOUBLE extends ffi.Opaque {}

class _LDBL12 extends ffi.Struct {
  @ffi.Array.multi([12])
  external ffi.Array<ffi.UnsignedChar> ld12;
}

abstract class DUCKDB_TYPE {
  static const int DUCKDB_TYPE_INVALID = 0;
  static const int DUCKDB_TYPE_BOOLEAN = 1;
  static const int DUCKDB_TYPE_TINYINT = 2;
  static const int DUCKDB_TYPE_SMALLINT = 3;
  static const int DUCKDB_TYPE_INTEGER = 4;
  static const int DUCKDB_TYPE_BIGINT = 5;
  static const int DUCKDB_TYPE_UTINYINT = 6;
  static const int DUCKDB_TYPE_USMALLINT = 7;
  static const int DUCKDB_TYPE_UINTEGER = 8;
  static const int DUCKDB_TYPE_UBIGINT = 9;
  static const int DUCKDB_TYPE_FLOAT = 10;
  static const int DUCKDB_TYPE_DOUBLE = 11;
  static const int DUCKDB_TYPE_TIMESTAMP = 12;
  static const int DUCKDB_TYPE_DATE = 13;
  static const int DUCKDB_TYPE_TIME = 14;
  static const int DUCKDB_TYPE_INTERVAL = 15;
  static const int DUCKDB_TYPE_HUGEINT = 16;
  static const int DUCKDB_TYPE_VARCHAR = 17;
  static const int DUCKDB_TYPE_BLOB = 18;
  static const int DUCKDB_TYPE_DECIMAL = 19;
  static const int DUCKDB_TYPE_TIMESTAMP_S = 20;
  static const int DUCKDB_TYPE_TIMESTAMP_MS = 21;
  static const int DUCKDB_TYPE_TIMESTAMP_NS = 22;
  static const int DUCKDB_TYPE_ENUM = 23;
  static const int DUCKDB_TYPE_LIST = 24;
  static const int DUCKDB_TYPE_STRUCT = 25;
  static const int DUCKDB_TYPE_MAP = 26;
  static const int DUCKDB_TYPE_UUID = 27;
  static const int DUCKDB_TYPE_JSON = 28;
  static const int DUCKDB_TYPE_UNION = 29;
}

class duckdb_date extends ffi.Struct {
  @ffi.Int32()
  external int days;
}

class duckdb_date_struct extends ffi.Struct {
  @ffi.Int32()
  external int year;

  @ffi.Int8()
  external int month;

  @ffi.Int8()
  external int day;
}

class duckdb_time extends ffi.Struct {
  @ffi.Int64()
  external int micros;
}

class duckdb_time_struct extends ffi.Struct {
  @ffi.Int8()
  external int hour;

  @ffi.Int8()
  external int min;

  @ffi.Int8()
  external int sec;

  @ffi.Int32()
  external int micros;
}

class duckdb_timestamp extends ffi.Struct {
  @ffi.Int64()
  external int micros;
}

class duckdb_timestamp_struct extends ffi.Struct {
  external duckdb_date_struct date;

  external duckdb_time_struct time;
}

class duckdb_interval extends ffi.Struct {
  @ffi.Int32()
  external int months;

  @ffi.Int32()
  external int days;

  @ffi.Int64()
  external int micros;
}

class duckdb_hugeint extends ffi.Struct {
  @ffi.Uint64()
  external int lower;

  @ffi.Int64()
  external int upper;
}

class duckdb_decimal extends ffi.Struct {
  @ffi.Uint8()
  external int width;

  @ffi.Uint8()
  external int scale;

  external duckdb_hugeint value;
}

class duckdb_string extends ffi.Struct {
  external ffi.Pointer<ffi.Char> data;

  @idx_t()
  external int size;
}

typedef idx_t = ffi.Uint64;

class duckdb_blob extends ffi.Struct {
  external ffi.Pointer<ffi.Void> data;

  @idx_t()
  external int size;
}

class duckdb_column extends ffi.Struct {
  external ffi.Pointer<ffi.Void> __deprecated_data;

  external ffi.Pointer<ffi.Bool> __deprecated_nullmask;

  @ffi.Int32()
  external int __deprecated_type;

  external ffi.Pointer<ffi.Char> __deprecated_name;

  external ffi.Pointer<ffi.Void> internal_data;
}

class duckdb_result extends ffi.Struct {
  @idx_t()
  external int __deprecated_column_count;

  @idx_t()
  external int __deprecated_row_count;

  @idx_t()
  external int __deprecated_rows_changed;

  external ffi.Pointer<duckdb_column> __deprecated_columns;

  external ffi.Pointer<ffi.Char> __deprecated_error_message;

  external ffi.Pointer<ffi.Void> internal_data;
}

abstract class duckdb_state {
  static const int DuckDBSuccess = 0;
  static const int DuckDBError = 1;
}

abstract class duckdb_pending_state {
  static const int DUCKDB_PENDING_RESULT_READY = 0;
  static const int DUCKDB_PENDING_RESULT_NOT_READY = 1;
  static const int DUCKDB_PENDING_ERROR = 2;
}

typedef duckdb_database = ffi.Pointer<ffi.Void>;
typedef duckdb_config = ffi.Pointer<ffi.Void>;
typedef duckdb_connection = ffi.Pointer<ffi.Void>;
typedef duckdb_logical_type = ffi.Pointer<ffi.Void>;
typedef duckdb_data_chunk = ffi.Pointer<ffi.Void>;
typedef duckdb_prepared_statement = ffi.Pointer<ffi.Void>;
typedef duckdb_arrow = ffi.Pointer<ffi.Void>;
typedef duckdb_pending_result = ffi.Pointer<ffi.Void>;
typedef duckdb_value = ffi.Pointer<ffi.Void>;
typedef duckdb_vector = ffi.Pointer<ffi.Void>;
typedef duckdb_table_function = ffi.Pointer<ffi.Void>;
typedef duckdb_delete_callback_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(ffi.Pointer<ffi.Void>)>>;
typedef duckdb_table_function_bind_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(duckdb_bind_info)>>;
typedef duckdb_bind_info = ffi.Pointer<ffi.Void>;
typedef duckdb_table_function_init_t
    = ffi.Pointer<ffi.NativeFunction<ffi.Void Function(duckdb_init_info)>>;
typedef duckdb_init_info = ffi.Pointer<ffi.Void>;
typedef duckdb_table_function_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(duckdb_function_info, duckdb_data_chunk)>>;
typedef duckdb_function_info = ffi.Pointer<ffi.Void>;
typedef duckdb_replacement_callback_t = ffi.Pointer<
    ffi.NativeFunction<
        ffi.Void Function(duckdb_replacement_scan_info, ffi.Pointer<ffi.Char>,
            ffi.Pointer<ffi.Void>)>>;
typedef duckdb_replacement_scan_info = ffi.Pointer<ffi.Void>;
typedef duckdb_appender = ffi.Pointer<ffi.Void>;
typedef duckdb_arrow_schema = ffi.Pointer<ffi.Void>;
typedef duckdb_arrow_array = ffi.Pointer<ffi.Void>;
typedef duckdb_task_state = ffi.Pointer<ffi.Void>;

const int DUCKDB_API_0_3_1 = 1;

const int DUCKDB_API_0_3_2 = 2;

const int DUCKDB_API_LATEST = 2;

const int DUCKDB_API_VERSION = 2;

const int __bool_true_false_are_defined = 1;

const int false1 = 0;

const int true1 = 1;

const int _VCRT_COMPILER_PREPROCESSOR = 1;

const int _SAL_VERSION = 20;

const int __SAL_H_VERSION = 180000000;

const int _USE_DECLSPECS_FOR_SAL = 0;

const int _USE_ATTRIBUTES_FOR_SAL = 0;

const int _CRT_PACKING = 8;

const int _VCRUNTIME_DISABLED_WARNINGS = 4514;

const int _HAS_EXCEPTIONS = 1;

const int _WCHAR_T_DEFINED = 1;

const int NULL = 0;

const int _HAS_CXX17 = 0;

const int _HAS_CXX20 = 0;

const int _HAS_CXX23 = 0;

const int _HAS_NODISCARD = 1;

const int INT8_MIN = -128;

const int INT16_MIN = -32768;

const int INT32_MIN = -2147483648;

const int INT64_MIN = -9223372036854775808;

const int INT8_MAX = 127;

const int INT16_MAX = 32767;

const int INT32_MAX = 2147483647;

const int INT64_MAX = 9223372036854775807;

const int UINT8_MAX = 255;

const int UINT16_MAX = 65535;

const int UINT32_MAX = 4294967295;

const int UINT64_MAX = -1;

const int INT_LEAST8_MIN = -128;

const int INT_LEAST16_MIN = -32768;

const int INT_LEAST32_MIN = -2147483648;

const int INT_LEAST64_MIN = -9223372036854775808;

const int INT_LEAST8_MAX = 127;

const int INT_LEAST16_MAX = 32767;

const int INT_LEAST32_MAX = 2147483647;

const int INT_LEAST64_MAX = 9223372036854775807;

const int UINT_LEAST8_MAX = 255;

const int UINT_LEAST16_MAX = 65535;

const int UINT_LEAST32_MAX = 4294967295;

const int UINT_LEAST64_MAX = -1;

const int INT_FAST8_MIN = -128;

const int INT_FAST16_MIN = -2147483648;

const int INT_FAST32_MIN = -2147483648;

const int INT_FAST64_MIN = -9223372036854775808;

const int INT_FAST8_MAX = 127;

const int INT_FAST16_MAX = 2147483647;

const int INT_FAST32_MAX = 2147483647;

const int INT_FAST64_MAX = 9223372036854775807;

const int UINT_FAST8_MAX = 255;

const int UINT_FAST16_MAX = 4294967295;

const int UINT_FAST32_MAX = 4294967295;

const int UINT_FAST64_MAX = -1;

const int INTPTR_MIN = -9223372036854775808;

const int INTPTR_MAX = 9223372036854775807;

const int UINTPTR_MAX = -1;

const int INTMAX_MIN = -9223372036854775808;

const int INTMAX_MAX = 9223372036854775807;

const int UINTMAX_MAX = -1;

const int PTRDIFF_MIN = -9223372036854775808;

const int PTRDIFF_MAX = 9223372036854775807;

const int SIZE_MAX = -1;

const int SIG_ATOMIC_MIN = -2147483648;

const int SIG_ATOMIC_MAX = 2147483647;

const int WCHAR_MIN = 0;

const int WCHAR_MAX = 65535;

const int WINT_MIN = 0;

const int WINT_MAX = 65535;

const int _UCRT_DISABLED_WARNINGS = 4324;

const int _ARGMAX = 100;

const int _TRUNCATE = -1;

const int _CRT_INT_MAX = 2147483647;

const int _CRT_SIZE_MAX = -1;

const String __FILEW__ = 'C';

const int _CRT_FUNCTIONS_REQUIRED = 1;

const int _CRT_HAS_CXX17 = 0;

const int _ARM_WINAPI_PARTITION_DESKTOP_SDK_AVAILABLE = 1;

const int _CRT_BUILD_DESKTOP_APP = 1;

const int _CRT_INTERNAL_NONSTDC_NAMES = 1;

const int __STDC_SECURE_LIB__ = 200411;

const int __GOT_SECURE_LIB__ = 200411;

const int __STDC_WANT_SECURE_LIB__ = 1;

const int _SECURECRT_FILL_BUFFER_PATTERN = 254;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES = 0;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_COUNT = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES = 1;

const int _CRT_SECURE_CPP_OVERLOAD_STANDARD_NAMES_MEMORY = 0;

const int _CRT_SECURE_CPP_OVERLOAD_SECURE_NAMES_MEMORY = 0;

const int _MAX_ITOSTR_BASE16_COUNT = 9;

const int _MAX_ITOSTR_BASE10_COUNT = 12;

const int _MAX_ITOSTR_BASE8_COUNT = 12;

const int _MAX_ITOSTR_BASE2_COUNT = 33;

const int _MAX_LTOSTR_BASE16_COUNT = 9;

const int _MAX_LTOSTR_BASE10_COUNT = 12;

const int _MAX_LTOSTR_BASE8_COUNT = 12;

const int _MAX_LTOSTR_BASE2_COUNT = 33;

const int _MAX_ULTOSTR_BASE16_COUNT = 9;

const int _MAX_ULTOSTR_BASE10_COUNT = 11;

const int _MAX_ULTOSTR_BASE8_COUNT = 12;

const int _MAX_ULTOSTR_BASE2_COUNT = 33;

const int _MAX_I64TOSTR_BASE16_COUNT = 17;

const int _MAX_I64TOSTR_BASE10_COUNT = 21;

const int _MAX_I64TOSTR_BASE8_COUNT = 23;

const int _MAX_I64TOSTR_BASE2_COUNT = 65;

const int _MAX_U64TOSTR_BASE16_COUNT = 17;

const int _MAX_U64TOSTR_BASE10_COUNT = 21;

const int _MAX_U64TOSTR_BASE8_COUNT = 23;

const int _MAX_U64TOSTR_BASE2_COUNT = 65;

const int CHAR_BIT = 8;

const int SCHAR_MIN = -128;

const int SCHAR_MAX = 127;

const int UCHAR_MAX = 255;

const int CHAR_MIN = -128;

const int CHAR_MAX = 127;

const int MB_LEN_MAX = 5;

const int SHRT_MIN = -32768;

const int SHRT_MAX = 32767;

const int USHRT_MAX = 65535;

const int INT_MIN = -2147483648;

const int INT_MAX = 2147483647;

const int UINT_MAX = 4294967295;

const int LONG_MIN = -2147483648;

const int LONG_MAX = 2147483647;

const int ULONG_MAX = 4294967295;

const int LLONG_MAX = 9223372036854775807;

const int LLONG_MIN = -9223372036854775808;

const int ULLONG_MAX = -1;

const int _I8_MIN = -128;

const int _I8_MAX = 127;

const int _UI8_MAX = 255;

const int _I16_MIN = -32768;

const int _I16_MAX = 32767;

const int _UI16_MAX = 65535;

const int _I32_MIN = -2147483648;

const int _I32_MAX = 2147483647;

const int _UI32_MAX = 4294967295;

const int _I64_MIN = -9223372036854775808;

const int _I64_MAX = 9223372036854775807;

const int _UI64_MAX = -1;

const int RSIZE_MAX = 9223372036854775807;

const int EXIT_SUCCESS = 0;

const int EXIT_FAILURE = 1;

const int _WRITE_ABORT_MSG = 1;

const int _CALL_REPORTFAULT = 2;

const int _OUT_TO_DEFAULT = 0;

const int _OUT_TO_STDERR = 1;

const int _OUT_TO_MSGBOX = 2;

const int _REPORT_ERRMODE = 3;

const int RAND_MAX = 32767;

const int _CVTBUFSIZE = 349;

const int _MAX_PATH = 260;

const int _MAX_DRIVE = 3;

const int _MAX_DIR = 256;

const int _MAX_FNAME = 256;

const int _MAX_EXT = 256;

const int _MAX_ENV = 32767;
